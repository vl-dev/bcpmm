/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { CPMM_POC_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const BURN_VIRTUAL_TOKEN_DISCRIMINATOR = new Uint8Array([
  27, 21, 118, 210, 92, 230, 68, 59,
]);

export function getBurnVirtualTokenDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    BURN_VIRTUAL_TOKEN_DISCRIMINATOR
  );
}

export type BurnVirtualTokenInstruction<
  TProgram extends string = typeof CPMM_POC_PROGRAM_ADDRESS,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountPool extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      ...TRemainingAccounts,
    ]
  >;

export type BurnVirtualTokenInstructionData = {
  discriminator: ReadonlyUint8Array;
  bAmountBasisPoints: number;
};

export type BurnVirtualTokenInstructionDataArgs = {
  bAmountBasisPoints: number;
};

export function getBurnVirtualTokenInstructionDataEncoder(): FixedSizeEncoder<BurnVirtualTokenInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['bAmountBasisPoints', getU16Encoder()],
    ]),
    (value) => ({ ...value, discriminator: BURN_VIRTUAL_TOKEN_DISCRIMINATOR })
  );
}

export function getBurnVirtualTokenInstructionDataDecoder(): FixedSizeDecoder<BurnVirtualTokenInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['bAmountBasisPoints', getU16Decoder()],
  ]);
}

export function getBurnVirtualTokenInstructionDataCodec(): FixedSizeCodec<
  BurnVirtualTokenInstructionDataArgs,
  BurnVirtualTokenInstructionData
> {
  return combineCodec(
    getBurnVirtualTokenInstructionDataEncoder(),
    getBurnVirtualTokenInstructionDataDecoder()
  );
}

export type BurnVirtualTokenInput<
  TAccountPayer extends string = string,
  TAccountPool extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  pool: Address<TAccountPool>;
  bAmountBasisPoints: BurnVirtualTokenInstructionDataArgs['bAmountBasisPoints'];
};

export function getBurnVirtualTokenInstruction<
  TAccountPayer extends string,
  TAccountPool extends string,
  TProgramAddress extends Address = typeof CPMM_POC_PROGRAM_ADDRESS,
>(
  input: BurnVirtualTokenInput<TAccountPayer, TAccountPool>,
  config?: { programAddress?: TProgramAddress }
): BurnVirtualTokenInstruction<TProgramAddress, TAccountPayer, TAccountPool> {
  // Program address.
  const programAddress = config?.programAddress ?? CPMM_POC_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    pool: { value: input.pool ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [getAccountMeta(accounts.payer), getAccountMeta(accounts.pool)],
    data: getBurnVirtualTokenInstructionDataEncoder().encode(
      args as BurnVirtualTokenInstructionDataArgs
    ),
    programAddress,
  } as BurnVirtualTokenInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountPool
  >);
}

export type ParsedBurnVirtualTokenInstruction<
  TProgram extends string = typeof CPMM_POC_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    payer: TAccountMetas[0];
    pool: TAccountMetas[1];
  };
  data: BurnVirtualTokenInstructionData;
};

export function parseBurnVirtualTokenInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedBurnVirtualTokenInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: { payer: getNextAccount(), pool: getNextAccount() },
    data: getBurnVirtualTokenInstructionDataDecoder().decode(instruction.data),
  };
}
