/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/kit';
import { CPMM_POC_PROGRAM_ADDRESS } from '../programs';

/** InsufficientVirtualTokenBalance: Insufficient virtual token balance */
export const CPMM_POC_ERROR__INSUFFICIENT_VIRTUAL_TOKEN_BALANCE = 0x1770; // 6000
/** AmountTooSmall: Amount too small */
export const CPMM_POC_ERROR__AMOUNT_TOO_SMALL = 0x1771; // 6001
/** InvalidOwner: Invalid owner */
export const CPMM_POC_ERROR__INVALID_OWNER = 0x1772; // 6002
/** NonzeroBalance: Nonzero balance */
export const CPMM_POC_ERROR__NONZERO_BALANCE = 0x1773; // 6003

export type CpmmPocError =
  | typeof CPMM_POC_ERROR__AMOUNT_TOO_SMALL
  | typeof CPMM_POC_ERROR__INSUFFICIENT_VIRTUAL_TOKEN_BALANCE
  | typeof CPMM_POC_ERROR__INVALID_OWNER
  | typeof CPMM_POC_ERROR__NONZERO_BALANCE;

let cpmmPocErrorMessages: Record<CpmmPocError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  cpmmPocErrorMessages = {
    [CPMM_POC_ERROR__AMOUNT_TOO_SMALL]: `Amount too small`,
    [CPMM_POC_ERROR__INSUFFICIENT_VIRTUAL_TOKEN_BALANCE]: `Insufficient virtual token balance`,
    [CPMM_POC_ERROR__INVALID_OWNER]: `Invalid owner`,
    [CPMM_POC_ERROR__NONZERO_BALANCE]: `Nonzero balance`,
  };
}

export function getCpmmPocErrorMessage(code: CpmmPocError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (cpmmPocErrorMessages as Record<CpmmPocError, string>)[code];
  }

  return 'Error message not available in production bundles.';
}

export function isCpmmPocError<TProgramErrorCode extends CpmmPocError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    CPMM_POC_PROGRAM_ADDRESS,
    code
  );
}
