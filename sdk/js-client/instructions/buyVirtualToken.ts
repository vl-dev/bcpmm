/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { CPMM_POC_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const BUY_VIRTUAL_TOKEN_DISCRIMINATOR = new Uint8Array([
  179, 132, 87, 155, 223, 190, 20, 113,
]);

export function getBuyVirtualTokenDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    BUY_VIRTUAL_TOKEN_DISCRIMINATOR
  );
}

export type BuyVirtualTokenInstruction<
  TProgram extends string = typeof CPMM_POC_PROGRAM_ADDRESS,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountPayerAta extends string | AccountMeta<string> = string,
  TAccountVirtualTokenAccount extends string | AccountMeta<string> = string,
  TAccountPool extends string | AccountMeta<string> = string,
  TAccountTreasury extends string | AccountMeta<string> = string,
  TAccountTreasuryAta extends string | AccountMeta<string> = string,
  TAccountAMint extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountPayerAta extends string
        ? WritableAccount<TAccountPayerAta>
        : TAccountPayerAta,
      TAccountVirtualTokenAccount extends string
        ? WritableAccount<TAccountVirtualTokenAccount>
        : TAccountVirtualTokenAccount,
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountTreasury extends string
        ? WritableAccount<TAccountTreasury>
        : TAccountTreasury,
      TAccountTreasuryAta extends string
        ? WritableAccount<TAccountTreasuryAta>
        : TAccountTreasuryAta,
      TAccountAMint extends string
        ? ReadonlyAccount<TAccountAMint>
        : TAccountAMint,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type BuyVirtualTokenInstructionData = {
  discriminator: ReadonlyUint8Array;
  /** a_amount is the amount of Mint A to swap for Mint B. Includes decimals. */
  aAmount: bigint;
  /** The minimum amount of Mint B to receive. If below this, the transaction will fail. */
  bAmountMin: bigint;
};

export type BuyVirtualTokenInstructionDataArgs = {
  /** a_amount is the amount of Mint A to swap for Mint B. Includes decimals. */
  aAmount: number | bigint;
  /** The minimum amount of Mint B to receive. If below this, the transaction will fail. */
  bAmountMin: number | bigint;
};

export function getBuyVirtualTokenInstructionDataEncoder(): FixedSizeEncoder<BuyVirtualTokenInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['aAmount', getU64Encoder()],
      ['bAmountMin', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: BUY_VIRTUAL_TOKEN_DISCRIMINATOR })
  );
}

export function getBuyVirtualTokenInstructionDataDecoder(): FixedSizeDecoder<BuyVirtualTokenInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['aAmount', getU64Decoder()],
    ['bAmountMin', getU64Decoder()],
  ]);
}

export function getBuyVirtualTokenInstructionDataCodec(): FixedSizeCodec<
  BuyVirtualTokenInstructionDataArgs,
  BuyVirtualTokenInstructionData
> {
  return combineCodec(
    getBuyVirtualTokenInstructionDataEncoder(),
    getBuyVirtualTokenInstructionDataDecoder()
  );
}

export type BuyVirtualTokenAsyncInput<
  TAccountPayer extends string = string,
  TAccountPayerAta extends string = string,
  TAccountVirtualTokenAccount extends string = string,
  TAccountPool extends string = string,
  TAccountTreasury extends string = string,
  TAccountTreasuryAta extends string = string,
  TAccountAMint extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  payerAta?: Address<TAccountPayerAta>;
  virtualTokenAccount?: Address<TAccountVirtualTokenAccount>;
  pool: Address<TAccountPool>;
  treasury?: Address<TAccountTreasury>;
  treasuryAta?: Address<TAccountTreasuryAta>;
  aMint: Address<TAccountAMint>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  aAmount: BuyVirtualTokenInstructionDataArgs['aAmount'];
  bAmountMin: BuyVirtualTokenInstructionDataArgs['bAmountMin'];
};

export async function getBuyVirtualTokenInstructionAsync<
  TAccountPayer extends string,
  TAccountPayerAta extends string,
  TAccountVirtualTokenAccount extends string,
  TAccountPool extends string,
  TAccountTreasury extends string,
  TAccountTreasuryAta extends string,
  TAccountAMint extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof CPMM_POC_PROGRAM_ADDRESS,
>(
  input: BuyVirtualTokenAsyncInput<
    TAccountPayer,
    TAccountPayerAta,
    TAccountVirtualTokenAccount,
    TAccountPool,
    TAccountTreasury,
    TAccountTreasuryAta,
    TAccountAMint,
    TAccountTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  BuyVirtualTokenInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountPayerAta,
    TAccountVirtualTokenAccount,
    TAccountPool,
    TAccountTreasury,
    TAccountTreasuryAta,
    TAccountAMint,
    TAccountTokenProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? CPMM_POC_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    payerAta: { value: input.payerAta ?? null, isWritable: true },
    virtualTokenAccount: {
      value: input.virtualTokenAccount ?? null,
      isWritable: true,
    },
    pool: { value: input.pool ?? null, isWritable: true },
    treasury: { value: input.treasury ?? null, isWritable: true },
    treasuryAta: { value: input.treasuryAta ?? null, isWritable: true },
    aMint: { value: input.aMint ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.payerAta.value) {
    accounts.payerAta.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.payer.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.aMint.value)),
      ],
    });
  }
  if (!accounts.virtualTokenAccount.value) {
    accounts.virtualTokenAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            118, 105, 114, 116, 117, 97, 108, 95, 116, 111, 107, 101, 110, 95,
            97, 99, 99, 111, 117, 110, 116,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.pool.value)),
        getAddressEncoder().encode(expectAddress(accounts.payer.value)),
      ],
    });
  }
  if (!accounts.treasury.value) {
    accounts.treasury.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([116, 114, 101, 97, 115, 117, 114, 121])
        ),
        getAddressEncoder().encode(expectAddress(accounts.aMint.value)),
      ],
    });
  }
  if (!accounts.treasuryAta.value) {
    accounts.treasuryAta.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.treasury.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.aMint.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.payerAta),
      getAccountMeta(accounts.virtualTokenAccount),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.treasury),
      getAccountMeta(accounts.treasuryAta),
      getAccountMeta(accounts.aMint),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getBuyVirtualTokenInstructionDataEncoder().encode(
      args as BuyVirtualTokenInstructionDataArgs
    ),
    programAddress,
  } as BuyVirtualTokenInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountPayerAta,
    TAccountVirtualTokenAccount,
    TAccountPool,
    TAccountTreasury,
    TAccountTreasuryAta,
    TAccountAMint,
    TAccountTokenProgram,
    TAccountSystemProgram
  >);
}

export type BuyVirtualTokenInput<
  TAccountPayer extends string = string,
  TAccountPayerAta extends string = string,
  TAccountVirtualTokenAccount extends string = string,
  TAccountPool extends string = string,
  TAccountTreasury extends string = string,
  TAccountTreasuryAta extends string = string,
  TAccountAMint extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  payerAta: Address<TAccountPayerAta>;
  virtualTokenAccount: Address<TAccountVirtualTokenAccount>;
  pool: Address<TAccountPool>;
  treasury: Address<TAccountTreasury>;
  treasuryAta: Address<TAccountTreasuryAta>;
  aMint: Address<TAccountAMint>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  aAmount: BuyVirtualTokenInstructionDataArgs['aAmount'];
  bAmountMin: BuyVirtualTokenInstructionDataArgs['bAmountMin'];
};

export function getBuyVirtualTokenInstruction<
  TAccountPayer extends string,
  TAccountPayerAta extends string,
  TAccountVirtualTokenAccount extends string,
  TAccountPool extends string,
  TAccountTreasury extends string,
  TAccountTreasuryAta extends string,
  TAccountAMint extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof CPMM_POC_PROGRAM_ADDRESS,
>(
  input: BuyVirtualTokenInput<
    TAccountPayer,
    TAccountPayerAta,
    TAccountVirtualTokenAccount,
    TAccountPool,
    TAccountTreasury,
    TAccountTreasuryAta,
    TAccountAMint,
    TAccountTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): BuyVirtualTokenInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountPayerAta,
  TAccountVirtualTokenAccount,
  TAccountPool,
  TAccountTreasury,
  TAccountTreasuryAta,
  TAccountAMint,
  TAccountTokenProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? CPMM_POC_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    payerAta: { value: input.payerAta ?? null, isWritable: true },
    virtualTokenAccount: {
      value: input.virtualTokenAccount ?? null,
      isWritable: true,
    },
    pool: { value: input.pool ?? null, isWritable: true },
    treasury: { value: input.treasury ?? null, isWritable: true },
    treasuryAta: { value: input.treasuryAta ?? null, isWritable: true },
    aMint: { value: input.aMint ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.payerAta),
      getAccountMeta(accounts.virtualTokenAccount),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.treasury),
      getAccountMeta(accounts.treasuryAta),
      getAccountMeta(accounts.aMint),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getBuyVirtualTokenInstructionDataEncoder().encode(
      args as BuyVirtualTokenInstructionDataArgs
    ),
    programAddress,
  } as BuyVirtualTokenInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountPayerAta,
    TAccountVirtualTokenAccount,
    TAccountPool,
    TAccountTreasury,
    TAccountTreasuryAta,
    TAccountAMint,
    TAccountTokenProgram,
    TAccountSystemProgram
  >);
}

export type ParsedBuyVirtualTokenInstruction<
  TProgram extends string = typeof CPMM_POC_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    payer: TAccountMetas[0];
    payerAta: TAccountMetas[1];
    virtualTokenAccount: TAccountMetas[2];
    pool: TAccountMetas[3];
    treasury: TAccountMetas[4];
    treasuryAta: TAccountMetas[5];
    aMint: TAccountMetas[6];
    tokenProgram: TAccountMetas[7];
    systemProgram: TAccountMetas[8];
  };
  data: BuyVirtualTokenInstructionData;
};

export function parseBuyVirtualTokenInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedBuyVirtualTokenInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      payerAta: getNextAccount(),
      virtualTokenAccount: getNextAccount(),
      pool: getNextAccount(),
      treasury: getNextAccount(),
      treasuryAta: getNextAccount(),
      aMint: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getBuyVirtualTokenInstructionDataDecoder().decode(instruction.data),
  };
}
