/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedBurnVirtualTokenInstruction,
  type ParsedBuyVirtualTokenInstruction,
  type ParsedClaimAdminFeesInstruction,
  type ParsedClaimCreatorFeesInstruction,
  type ParsedCloseUserBurnAllowanceInstruction,
  type ParsedCloseVirtualTokenAccountInstruction,
  type ParsedCreatePoolInstruction,
  type ParsedInitializeCentralStateInstruction,
  type ParsedInitializeTreasuryInstruction,
  type ParsedInitializeUserBurnAllowanceInstruction,
  type ParsedInitializeVirtualTokenAccountInstruction,
  type ParsedSellVirtualTokenInstruction,
  type ParsedUpdateTreasuryAuthorityInstruction,
} from '../instructions';

export const CPMM_POC_PROGRAM_ADDRESS =
  'J2rzAsBbYpMVEA3dtuudvzizpbwJXLJgR3yEToKzq1jB' as Address<'J2rzAsBbYpMVEA3dtuudvzizpbwJXLJgR3yEToKzq1jB'>;

export enum CpmmPocAccount {
  BcpmmPool,
  CentralState,
  Treasury,
  UserBurnAllowance,
  VirtualTokenAccount,
}

export function identifyCpmmPocAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): CpmmPocAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([176, 79, 229, 1, 239, 41, 66, 21])
      ),
      0
    )
  ) {
    return CpmmPocAccount.BcpmmPool;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([201, 49, 35, 231, 4, 164, 205, 91])
      ),
      0
    )
  ) {
    return CpmmPocAccount.CentralState;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([238, 239, 123, 238, 89, 1, 168, 253])
      ),
      0
    )
  ) {
    return CpmmPocAccount.Treasury;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([154, 213, 227, 142, 136, 30, 145, 155])
      ),
      0
    )
  ) {
    return CpmmPocAccount.UserBurnAllowance;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([213, 245, 54, 92, 159, 127, 14, 1])
      ),
      0
    )
  ) {
    return CpmmPocAccount.VirtualTokenAccount;
  }
  throw new Error(
    'The provided account could not be identified as a cpmmPoc account.'
  );
}

export enum CpmmPocInstruction {
  BurnVirtualToken,
  BuyVirtualToken,
  ClaimAdminFees,
  ClaimCreatorFees,
  CloseUserBurnAllowance,
  CloseVirtualTokenAccount,
  CreatePool,
  InitializeCentralState,
  InitializeTreasury,
  InitializeUserBurnAllowance,
  InitializeVirtualTokenAccount,
  SellVirtualToken,
  UpdateTreasuryAuthority,
}

export function identifyCpmmPocInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): CpmmPocInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([27, 21, 118, 210, 92, 230, 68, 59])
      ),
      0
    )
  ) {
    return CpmmPocInstruction.BurnVirtualToken;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([179, 132, 87, 155, 223, 190, 20, 113])
      ),
      0
    )
  ) {
    return CpmmPocInstruction.BuyVirtualToken;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([68, 216, 128, 44, 49, 31, 91, 149])
      ),
      0
    )
  ) {
    return CpmmPocInstruction.ClaimAdminFees;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([0, 23, 125, 234, 156, 118, 134, 89])
      ),
      0
    )
  ) {
    return CpmmPocInstruction.ClaimCreatorFees;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([217, 24, 207, 62, 181, 123, 16, 187])
      ),
      0
    )
  ) {
    return CpmmPocInstruction.CloseUserBurnAllowance;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([27, 182, 37, 28, 100, 111, 12, 0])
      ),
      0
    )
  ) {
    return CpmmPocInstruction.CloseVirtualTokenAccount;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([233, 146, 209, 142, 207, 104, 64, 188])
      ),
      0
    )
  ) {
    return CpmmPocInstruction.CreatePool;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([204, 64, 162, 125, 253, 90, 119, 4])
      ),
      0
    )
  ) {
    return CpmmPocInstruction.InitializeCentralState;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([124, 186, 211, 195, 85, 165, 129, 166])
      ),
      0
    )
  ) {
    return CpmmPocInstruction.InitializeTreasury;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([160, 177, 207, 127, 14, 112, 211, 70])
      ),
      0
    )
  ) {
    return CpmmPocInstruction.InitializeUserBurnAllowance;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([188, 135, 151, 109, 183, 234, 240, 3])
      ),
      0
    )
  ) {
    return CpmmPocInstruction.InitializeVirtualTokenAccount;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([9, 127, 144, 65, 96, 233, 54, 133])
      ),
      0
    )
  ) {
    return CpmmPocInstruction.SellVirtualToken;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([185, 149, 66, 195, 105, 183, 32, 244])
      ),
      0
    )
  ) {
    return CpmmPocInstruction.UpdateTreasuryAuthority;
  }
  throw new Error(
    'The provided instruction could not be identified as a cpmmPoc instruction.'
  );
}

export type ParsedCpmmPocInstruction<
  TProgram extends string = 'J2rzAsBbYpMVEA3dtuudvzizpbwJXLJgR3yEToKzq1jB',
> =
  | ({
      instructionType: CpmmPocInstruction.BurnVirtualToken;
    } & ParsedBurnVirtualTokenInstruction<TProgram>)
  | ({
      instructionType: CpmmPocInstruction.BuyVirtualToken;
    } & ParsedBuyVirtualTokenInstruction<TProgram>)
  | ({
      instructionType: CpmmPocInstruction.ClaimAdminFees;
    } & ParsedClaimAdminFeesInstruction<TProgram>)
  | ({
      instructionType: CpmmPocInstruction.ClaimCreatorFees;
    } & ParsedClaimCreatorFeesInstruction<TProgram>)
  | ({
      instructionType: CpmmPocInstruction.CloseUserBurnAllowance;
    } & ParsedCloseUserBurnAllowanceInstruction<TProgram>)
  | ({
      instructionType: CpmmPocInstruction.CloseVirtualTokenAccount;
    } & ParsedCloseVirtualTokenAccountInstruction<TProgram>)
  | ({
      instructionType: CpmmPocInstruction.CreatePool;
    } & ParsedCreatePoolInstruction<TProgram>)
  | ({
      instructionType: CpmmPocInstruction.InitializeCentralState;
    } & ParsedInitializeCentralStateInstruction<TProgram>)
  | ({
      instructionType: CpmmPocInstruction.InitializeTreasury;
    } & ParsedInitializeTreasuryInstruction<TProgram>)
  | ({
      instructionType: CpmmPocInstruction.InitializeUserBurnAllowance;
    } & ParsedInitializeUserBurnAllowanceInstruction<TProgram>)
  | ({
      instructionType: CpmmPocInstruction.InitializeVirtualTokenAccount;
    } & ParsedInitializeVirtualTokenAccountInstruction<TProgram>)
  | ({
      instructionType: CpmmPocInstruction.SellVirtualToken;
    } & ParsedSellVirtualTokenInstruction<TProgram>)
  | ({
      instructionType: CpmmPocInstruction.UpdateTreasuryAuthority;
    } & ParsedUpdateTreasuryAuthorityInstruction<TProgram>);
