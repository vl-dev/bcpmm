//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshSerialize;
use borsh::BorshDeserialize;

pub const INITIALIZE_CENTRAL_STATE_DISCRIMINATOR: [u8; 8] = [204, 64, 162, 125, 253, 90, 119, 4];

/// Accounts.
#[derive(Debug)]
pub struct InitializeCentralState {
      
              
          pub admin: solana_pubkey::Pubkey,
          
              
          pub central_state: solana_pubkey::Pubkey,
          
              
          pub system_program: solana_pubkey::Pubkey,
      }

impl InitializeCentralState {
  pub fn instruction(&self, args: InitializeCentralStateInstructionArgs) -> solana_instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: InitializeCentralStateInstructionArgs, remaining_accounts: &[solana_instruction::AccountMeta]) -> solana_instruction::Instruction {
    let mut accounts = Vec::with_capacity(3+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new(
            self.admin,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.central_state,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = InitializeCentralStateInstructionData::new().try_to_vec().unwrap();
          let mut args = args.try_to_vec().unwrap();
      data.append(&mut args);
    
    solana_instruction::Instruction {
      program_id: crate::CPMM_POC_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct InitializeCentralStateInstructionData {
            discriminator: [u8; 8],
                                                      }

impl InitializeCentralStateInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [204, 64, 162, 125, 253, 90, 119, 4],
                                                                                                                                  }
  }

    pub(crate) fn try_to_vec(&self) -> Result<Vec<u8>, std::io::Error> {
    borsh::to_vec(self)
  }
  }

impl Default for InitializeCentralStateInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct InitializeCentralStateInstructionArgs {
                  pub max_user_daily_burn_count: u16,
                pub max_creator_daily_burn_count: u16,
                pub user_burn_bp_x100: u32,
                pub creator_burn_bp_x100: u32,
                pub burn_reset_time_of_day_seconds: u32,
                pub creator_fee_basis_points: u16,
                pub buyback_fee_basis_points: u16,
                pub platform_fee_basis_points: u16,
      }

impl InitializeCentralStateInstructionArgs {
  pub(crate) fn try_to_vec(&self) -> Result<Vec<u8>, std::io::Error> {
    borsh::to_vec(self)
  }
}


/// Instruction builder for `InitializeCentralState`.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` admin
                ///   1. `[writable]` central_state
                ///   2. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct InitializeCentralStateBuilder {
            admin: Option<solana_pubkey::Pubkey>,
                central_state: Option<solana_pubkey::Pubkey>,
                system_program: Option<solana_pubkey::Pubkey>,
                        max_user_daily_burn_count: Option<u16>,
                max_creator_daily_burn_count: Option<u16>,
                user_burn_bp_x100: Option<u32>,
                creator_burn_bp_x100: Option<u32>,
                burn_reset_time_of_day_seconds: Option<u32>,
                creator_fee_basis_points: Option<u16>,
                buyback_fee_basis_points: Option<u16>,
                platform_fee_basis_points: Option<u16>,
        __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl InitializeCentralStateBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn admin(&mut self, admin: solana_pubkey::Pubkey) -> &mut Self {
                        self.admin = Some(admin);
                    self
    }
            #[inline(always)]
    pub fn central_state(&mut self, central_state: solana_pubkey::Pubkey) -> &mut Self {
                        self.central_state = Some(central_state);
                    self
    }
            /// `[optional account, default to '11111111111111111111111111111111']`
#[inline(always)]
    pub fn system_program(&mut self, system_program: solana_pubkey::Pubkey) -> &mut Self {
                        self.system_program = Some(system_program);
                    self
    }
                    #[inline(always)]
      pub fn max_user_daily_burn_count(&mut self, max_user_daily_burn_count: u16) -> &mut Self {
        self.max_user_daily_burn_count = Some(max_user_daily_burn_count);
        self
      }
                #[inline(always)]
      pub fn max_creator_daily_burn_count(&mut self, max_creator_daily_burn_count: u16) -> &mut Self {
        self.max_creator_daily_burn_count = Some(max_creator_daily_burn_count);
        self
      }
                #[inline(always)]
      pub fn user_burn_bp_x100(&mut self, user_burn_bp_x100: u32) -> &mut Self {
        self.user_burn_bp_x100 = Some(user_burn_bp_x100);
        self
      }
                #[inline(always)]
      pub fn creator_burn_bp_x100(&mut self, creator_burn_bp_x100: u32) -> &mut Self {
        self.creator_burn_bp_x100 = Some(creator_burn_bp_x100);
        self
      }
                #[inline(always)]
      pub fn burn_reset_time_of_day_seconds(&mut self, burn_reset_time_of_day_seconds: u32) -> &mut Self {
        self.burn_reset_time_of_day_seconds = Some(burn_reset_time_of_day_seconds);
        self
      }
                #[inline(always)]
      pub fn creator_fee_basis_points(&mut self, creator_fee_basis_points: u16) -> &mut Self {
        self.creator_fee_basis_points = Some(creator_fee_basis_points);
        self
      }
                #[inline(always)]
      pub fn buyback_fee_basis_points(&mut self, buyback_fee_basis_points: u16) -> &mut Self {
        self.buyback_fee_basis_points = Some(buyback_fee_basis_points);
        self
      }
                #[inline(always)]
      pub fn platform_fee_basis_points(&mut self, platform_fee_basis_points: u16) -> &mut Self {
        self.platform_fee_basis_points = Some(platform_fee_basis_points);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_instruction::Instruction {
    let accounts = InitializeCentralState {
                              admin: self.admin.expect("admin is not set"),
                                        central_state: self.central_state.expect("central_state is not set"),
                                        system_program: self.system_program.unwrap_or(solana_pubkey::pubkey!("11111111111111111111111111111111")),
                      };
          let args = InitializeCentralStateInstructionArgs {
                                                              max_user_daily_burn_count: self.max_user_daily_burn_count.clone().expect("max_user_daily_burn_count is not set"),
                                                                  max_creator_daily_burn_count: self.max_creator_daily_burn_count.clone().expect("max_creator_daily_burn_count is not set"),
                                                                  user_burn_bp_x100: self.user_burn_bp_x100.clone().expect("user_burn_bp_x100 is not set"),
                                                                  creator_burn_bp_x100: self.creator_burn_bp_x100.clone().expect("creator_burn_bp_x100 is not set"),
                                                                  burn_reset_time_of_day_seconds: self.burn_reset_time_of_day_seconds.clone().expect("burn_reset_time_of_day_seconds is not set"),
                                                                  creator_fee_basis_points: self.creator_fee_basis_points.clone().expect("creator_fee_basis_points is not set"),
                                                                  buyback_fee_basis_points: self.buyback_fee_basis_points.clone().expect("buyback_fee_basis_points is not set"),
                                                                  platform_fee_basis_points: self.platform_fee_basis_points.clone().expect("platform_fee_basis_points is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `initialize_central_state` CPI accounts.
  pub struct InitializeCentralStateCpiAccounts<'a, 'b> {
          
                    
              pub admin: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub central_state: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub system_program: &'b solana_account_info::AccountInfo<'a>,
            }

/// `initialize_central_state` CPI instruction.
pub struct InitializeCentralStateCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_account_info::AccountInfo<'a>,
      
              
          pub admin: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub central_state: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub system_program: &'b solana_account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: InitializeCentralStateInstructionArgs,
  }

impl<'a, 'b> InitializeCentralStateCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_account_info::AccountInfo<'a>,
          accounts: InitializeCentralStateCpiAccounts<'a, 'b>,
              args: InitializeCentralStateInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              admin: accounts.admin,
              central_state: accounts.central_state,
              system_program: accounts.system_program,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program_error::ProgramResult {
    let mut accounts = Vec::with_capacity(3+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new(
            *self.admin.key,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.central_state.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = InitializeCentralStateInstructionData::new().try_to_vec().unwrap();
          let mut args = self.__args.try_to_vec().unwrap();
      data.append(&mut args);
    
    let instruction = solana_instruction::Instruction {
      program_id: crate::CPMM_POC_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(4 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.admin.clone());
                        account_infos.push(self.central_state.clone());
                        account_infos.push(self.system_program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_cpi::invoke(&instruction, &account_infos)
    } else {
      solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `InitializeCentralState` via CPI.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` admin
                ///   1. `[writable]` central_state
          ///   2. `[]` system_program
#[derive(Clone, Debug)]
pub struct InitializeCentralStateCpiBuilder<'a, 'b> {
  instruction: Box<InitializeCentralStateCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> InitializeCentralStateCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(InitializeCentralStateCpiBuilderInstruction {
      __program: program,
              admin: None,
              central_state: None,
              system_program: None,
                                            max_user_daily_burn_count: None,
                                max_creator_daily_burn_count: None,
                                user_burn_bp_x100: None,
                                creator_burn_bp_x100: None,
                                burn_reset_time_of_day_seconds: None,
                                creator_fee_basis_points: None,
                                buyback_fee_basis_points: None,
                                platform_fee_basis_points: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn admin(&mut self, admin: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.admin = Some(admin);
                    self
    }
      #[inline(always)]
    pub fn central_state(&mut self, central_state: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.central_state = Some(central_state);
                    self
    }
      #[inline(always)]
    pub fn system_program(&mut self, system_program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.system_program = Some(system_program);
                    self
    }
                    #[inline(always)]
      pub fn max_user_daily_burn_count(&mut self, max_user_daily_burn_count: u16) -> &mut Self {
        self.instruction.max_user_daily_burn_count = Some(max_user_daily_burn_count);
        self
      }
                #[inline(always)]
      pub fn max_creator_daily_burn_count(&mut self, max_creator_daily_burn_count: u16) -> &mut Self {
        self.instruction.max_creator_daily_burn_count = Some(max_creator_daily_burn_count);
        self
      }
                #[inline(always)]
      pub fn user_burn_bp_x100(&mut self, user_burn_bp_x100: u32) -> &mut Self {
        self.instruction.user_burn_bp_x100 = Some(user_burn_bp_x100);
        self
      }
                #[inline(always)]
      pub fn creator_burn_bp_x100(&mut self, creator_burn_bp_x100: u32) -> &mut Self {
        self.instruction.creator_burn_bp_x100 = Some(creator_burn_bp_x100);
        self
      }
                #[inline(always)]
      pub fn burn_reset_time_of_day_seconds(&mut self, burn_reset_time_of_day_seconds: u32) -> &mut Self {
        self.instruction.burn_reset_time_of_day_seconds = Some(burn_reset_time_of_day_seconds);
        self
      }
                #[inline(always)]
      pub fn creator_fee_basis_points(&mut self, creator_fee_basis_points: u16) -> &mut Self {
        self.instruction.creator_fee_basis_points = Some(creator_fee_basis_points);
        self
      }
                #[inline(always)]
      pub fn buyback_fee_basis_points(&mut self, buyback_fee_basis_points: u16) -> &mut Self {
        self.instruction.buyback_fee_basis_points = Some(buyback_fee_basis_points);
        self
      }
                #[inline(always)]
      pub fn platform_fee_basis_points(&mut self, platform_fee_basis_points: u16) -> &mut Self {
        self.instruction.platform_fee_basis_points = Some(platform_fee_basis_points);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_error::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
          let args = InitializeCentralStateInstructionArgs {
                                                              max_user_daily_burn_count: self.instruction.max_user_daily_burn_count.clone().expect("max_user_daily_burn_count is not set"),
                                                                  max_creator_daily_burn_count: self.instruction.max_creator_daily_burn_count.clone().expect("max_creator_daily_burn_count is not set"),
                                                                  user_burn_bp_x100: self.instruction.user_burn_bp_x100.clone().expect("user_burn_bp_x100 is not set"),
                                                                  creator_burn_bp_x100: self.instruction.creator_burn_bp_x100.clone().expect("creator_burn_bp_x100 is not set"),
                                                                  burn_reset_time_of_day_seconds: self.instruction.burn_reset_time_of_day_seconds.clone().expect("burn_reset_time_of_day_seconds is not set"),
                                                                  creator_fee_basis_points: self.instruction.creator_fee_basis_points.clone().expect("creator_fee_basis_points is not set"),
                                                                  buyback_fee_basis_points: self.instruction.buyback_fee_basis_points.clone().expect("buyback_fee_basis_points is not set"),
                                                                  platform_fee_basis_points: self.instruction.platform_fee_basis_points.clone().expect("platform_fee_basis_points is not set"),
                                    };
        let instruction = InitializeCentralStateCpi {
        __program: self.instruction.__program,
                  
          admin: self.instruction.admin.expect("admin is not set"),
                  
          central_state: self.instruction.central_state.expect("central_state is not set"),
                  
          system_program: self.instruction.system_program.expect("system_program is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct InitializeCentralStateCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_account_info::AccountInfo<'a>,
            admin: Option<&'b solana_account_info::AccountInfo<'a>>,
                central_state: Option<&'b solana_account_info::AccountInfo<'a>>,
                system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                        max_user_daily_burn_count: Option<u16>,
                max_creator_daily_burn_count: Option<u16>,
                user_burn_bp_x100: Option<u32>,
                creator_burn_bp_x100: Option<u32>,
                burn_reset_time_of_day_seconds: Option<u32>,
                creator_fee_basis_points: Option<u16>,
                buyback_fee_basis_points: Option<u16>,
                platform_fee_basis_points: Option<u16>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}

