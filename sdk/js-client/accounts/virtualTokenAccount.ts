/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const VIRTUAL_TOKEN_ACCOUNT_DISCRIMINATOR = new Uint8Array([
  213, 245, 54, 92, 159, 127, 14, 1,
]);

export function getVirtualTokenAccountDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    VIRTUAL_TOKEN_ACCOUNT_DISCRIMINATOR
  );
}

export type VirtualTokenAccount = {
  discriminator: ReadonlyUint8Array;
  /** Bump seed */
  bump: number;
  /** Pool address */
  pool: Address;
  /** Owner address */
  owner: Address;
  /** Balance of Mint B including decimals */
  balance: bigint;
  /** All fees paid when buying and selling tokens to this account. Denominated in Mint A including decimals */
  feesPaid: bigint;
};

export type VirtualTokenAccountArgs = {
  /** Bump seed */
  bump: number;
  /** Pool address */
  pool: Address;
  /** Owner address */
  owner: Address;
  /** Balance of Mint B including decimals */
  balance: number | bigint;
  /** All fees paid when buying and selling tokens to this account. Denominated in Mint A including decimals */
  feesPaid: number | bigint;
};

export function getVirtualTokenAccountEncoder(): FixedSizeEncoder<VirtualTokenAccountArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['bump', getU8Encoder()],
      ['pool', getAddressEncoder()],
      ['owner', getAddressEncoder()],
      ['balance', getU64Encoder()],
      ['feesPaid', getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: VIRTUAL_TOKEN_ACCOUNT_DISCRIMINATOR,
    })
  );
}

export function getVirtualTokenAccountDecoder(): FixedSizeDecoder<VirtualTokenAccount> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['bump', getU8Decoder()],
    ['pool', getAddressDecoder()],
    ['owner', getAddressDecoder()],
    ['balance', getU64Decoder()],
    ['feesPaid', getU64Decoder()],
  ]);
}

export function getVirtualTokenAccountCodec(): FixedSizeCodec<
  VirtualTokenAccountArgs,
  VirtualTokenAccount
> {
  return combineCodec(
    getVirtualTokenAccountEncoder(),
    getVirtualTokenAccountDecoder()
  );
}

export function decodeVirtualTokenAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<VirtualTokenAccount, TAddress>;
export function decodeVirtualTokenAccount<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<VirtualTokenAccount, TAddress>;
export function decodeVirtualTokenAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<VirtualTokenAccount, TAddress>
  | MaybeAccount<VirtualTokenAccount, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getVirtualTokenAccountDecoder()
  );
}

export async function fetchVirtualTokenAccount<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<VirtualTokenAccount, TAddress>> {
  const maybeAccount = await fetchMaybeVirtualTokenAccount(
    rpc,
    address,
    config
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeVirtualTokenAccount<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<VirtualTokenAccount, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeVirtualTokenAccount(maybeAccount);
}

export async function fetchAllVirtualTokenAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<VirtualTokenAccount>[]> {
  const maybeAccounts = await fetchAllMaybeVirtualTokenAccount(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeVirtualTokenAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<VirtualTokenAccount>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeVirtualTokenAccount(maybeAccount)
  );
}

export function getVirtualTokenAccountSize(): number {
  return 89;
}
