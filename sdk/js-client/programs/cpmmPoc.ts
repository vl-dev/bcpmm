/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedBurnVirtualTokenInstruction,
  type ParsedBuyVirtualTokenInstruction,
  type ParsedCloseVirtualTokenAccountInstruction,
  type ParsedCreatePoolInstruction,
  type ParsedInitializeVirtualTokenAccountInstruction,
  type ParsedSellVirtualTokenInstruction,
} from '../instructions';

export const CPMM_POC_PROGRAM_ADDRESS =
  '2rpy7rFzUMqPEbMP8pQGVS1tZfGeLsrsNcnzQcdAk2fz' as Address<'2rpy7rFzUMqPEbMP8pQGVS1tZfGeLsrsNcnzQcdAk2fz'>;

export enum CpmmPocAccount {
  BcpmmPool,
  VirtualTokenAccount,
}

export function identifyCpmmPocAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): CpmmPocAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([176, 79, 229, 1, 239, 41, 66, 21])
      ),
      0
    )
  ) {
    return CpmmPocAccount.BcpmmPool;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([213, 245, 54, 92, 159, 127, 14, 1])
      ),
      0
    )
  ) {
    return CpmmPocAccount.VirtualTokenAccount;
  }
  throw new Error(
    'The provided account could not be identified as a cpmmPoc account.'
  );
}

export enum CpmmPocInstruction {
  BurnVirtualToken,
  BuyVirtualToken,
  CloseVirtualTokenAccount,
  CreatePool,
  InitializeVirtualTokenAccount,
  SellVirtualToken,
}

export function identifyCpmmPocInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): CpmmPocInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([27, 21, 118, 210, 92, 230, 68, 59])
      ),
      0
    )
  ) {
    return CpmmPocInstruction.BurnVirtualToken;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([179, 132, 87, 155, 223, 190, 20, 113])
      ),
      0
    )
  ) {
    return CpmmPocInstruction.BuyVirtualToken;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([27, 182, 37, 28, 100, 111, 12, 0])
      ),
      0
    )
  ) {
    return CpmmPocInstruction.CloseVirtualTokenAccount;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([233, 146, 209, 142, 207, 104, 64, 188])
      ),
      0
    )
  ) {
    return CpmmPocInstruction.CreatePool;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([188, 135, 151, 109, 183, 234, 240, 3])
      ),
      0
    )
  ) {
    return CpmmPocInstruction.InitializeVirtualTokenAccount;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([9, 127, 144, 65, 96, 233, 54, 133])
      ),
      0
    )
  ) {
    return CpmmPocInstruction.SellVirtualToken;
  }
  throw new Error(
    'The provided instruction could not be identified as a cpmmPoc instruction.'
  );
}

export type ParsedCpmmPocInstruction<
  TProgram extends string = '2rpy7rFzUMqPEbMP8pQGVS1tZfGeLsrsNcnzQcdAk2fz',
> =
  | ({
      instructionType: CpmmPocInstruction.BurnVirtualToken;
    } & ParsedBurnVirtualTokenInstruction<TProgram>)
  | ({
      instructionType: CpmmPocInstruction.BuyVirtualToken;
    } & ParsedBuyVirtualTokenInstruction<TProgram>)
  | ({
      instructionType: CpmmPocInstruction.CloseVirtualTokenAccount;
    } & ParsedCloseVirtualTokenAccountInstruction<TProgram>)
  | ({
      instructionType: CpmmPocInstruction.CreatePool;
    } & ParsedCreatePoolInstruction<TProgram>)
  | ({
      instructionType: CpmmPocInstruction.InitializeVirtualTokenAccount;
    } & ParsedInitializeVirtualTokenAccountInstruction<TProgram>)
  | ({
      instructionType: CpmmPocInstruction.SellVirtualToken;
    } & ParsedSellVirtualTokenInstruction<TProgram>);
