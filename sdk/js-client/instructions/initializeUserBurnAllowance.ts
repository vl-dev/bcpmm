/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { CBMM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const INITIALIZE_USER_BURN_ALLOWANCE_DISCRIMINATOR = new Uint8Array([
  160, 177, 207, 127, 14, 112, 211, 70,
]);

export function getInitializeUserBurnAllowanceDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_USER_BURN_ALLOWANCE_DISCRIMINATOR
  );
}

export type InitializeUserBurnAllowanceInstruction<
  TProgram extends string = typeof CBMM_PROGRAM_ADDRESS,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountOwner extends string | AccountMeta<string> = string,
  TAccountCentralState extends string | AccountMeta<string> = string,
  TAccountUserBurnAllowance extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountOwner extends string
        ? ReadonlyAccount<TAccountOwner>
        : TAccountOwner,
      TAccountCentralState extends string
        ? ReadonlyAccount<TAccountCentralState>
        : TAccountCentralState,
      TAccountUserBurnAllowance extends string
        ? WritableAccount<TAccountUserBurnAllowance>
        : TAccountUserBurnAllowance,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeUserBurnAllowanceInstructionData = {
  discriminator: ReadonlyUint8Array;
  poolOwner: boolean;
};

export type InitializeUserBurnAllowanceInstructionDataArgs = {
  poolOwner: boolean;
};

export function getInitializeUserBurnAllowanceInstructionDataEncoder(): FixedSizeEncoder<InitializeUserBurnAllowanceInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['poolOwner', getBooleanEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: INITIALIZE_USER_BURN_ALLOWANCE_DISCRIMINATOR,
    })
  );
}

export function getInitializeUserBurnAllowanceInstructionDataDecoder(): FixedSizeDecoder<InitializeUserBurnAllowanceInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['poolOwner', getBooleanDecoder()],
  ]);
}

export function getInitializeUserBurnAllowanceInstructionDataCodec(): FixedSizeCodec<
  InitializeUserBurnAllowanceInstructionDataArgs,
  InitializeUserBurnAllowanceInstructionData
> {
  return combineCodec(
    getInitializeUserBurnAllowanceInstructionDataEncoder(),
    getInitializeUserBurnAllowanceInstructionDataDecoder()
  );
}

export type InitializeUserBurnAllowanceAsyncInput<
  TAccountPayer extends string = string,
  TAccountOwner extends string = string,
  TAccountCentralState extends string = string,
  TAccountUserBurnAllowance extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  /** The user for whom the burn allowance is being initialized */
  owner: Address<TAccountOwner>;
  centralState?: Address<TAccountCentralState>;
  userBurnAllowance: Address<TAccountUserBurnAllowance>;
  systemProgram?: Address<TAccountSystemProgram>;
  poolOwner: InitializeUserBurnAllowanceInstructionDataArgs['poolOwner'];
};

export async function getInitializeUserBurnAllowanceInstructionAsync<
  TAccountPayer extends string,
  TAccountOwner extends string,
  TAccountCentralState extends string,
  TAccountUserBurnAllowance extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof CBMM_PROGRAM_ADDRESS,
>(
  input: InitializeUserBurnAllowanceAsyncInput<
    TAccountPayer,
    TAccountOwner,
    TAccountCentralState,
    TAccountUserBurnAllowance,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  InitializeUserBurnAllowanceInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountOwner,
    TAccountCentralState,
    TAccountUserBurnAllowance,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? CBMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: false },
    centralState: { value: input.centralState ?? null, isWritable: false },
    userBurnAllowance: {
      value: input.userBurnAllowance ?? null,
      isWritable: true,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.centralState.value) {
    accounts.centralState.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            99, 101, 110, 116, 114, 97, 108, 95, 115, 116, 97, 116, 101,
          ])
        ),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.centralState),
      getAccountMeta(accounts.userBurnAllowance),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getInitializeUserBurnAllowanceInstructionDataEncoder().encode(
      args as InitializeUserBurnAllowanceInstructionDataArgs
    ),
    programAddress,
  } as InitializeUserBurnAllowanceInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountOwner,
    TAccountCentralState,
    TAccountUserBurnAllowance,
    TAccountSystemProgram
  >);
}

export type InitializeUserBurnAllowanceInput<
  TAccountPayer extends string = string,
  TAccountOwner extends string = string,
  TAccountCentralState extends string = string,
  TAccountUserBurnAllowance extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  /** The user for whom the burn allowance is being initialized */
  owner: Address<TAccountOwner>;
  centralState: Address<TAccountCentralState>;
  userBurnAllowance: Address<TAccountUserBurnAllowance>;
  systemProgram?: Address<TAccountSystemProgram>;
  poolOwner: InitializeUserBurnAllowanceInstructionDataArgs['poolOwner'];
};

export function getInitializeUserBurnAllowanceInstruction<
  TAccountPayer extends string,
  TAccountOwner extends string,
  TAccountCentralState extends string,
  TAccountUserBurnAllowance extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof CBMM_PROGRAM_ADDRESS,
>(
  input: InitializeUserBurnAllowanceInput<
    TAccountPayer,
    TAccountOwner,
    TAccountCentralState,
    TAccountUserBurnAllowance,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeUserBurnAllowanceInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountOwner,
  TAccountCentralState,
  TAccountUserBurnAllowance,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? CBMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: false },
    centralState: { value: input.centralState ?? null, isWritable: false },
    userBurnAllowance: {
      value: input.userBurnAllowance ?? null,
      isWritable: true,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.centralState),
      getAccountMeta(accounts.userBurnAllowance),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getInitializeUserBurnAllowanceInstructionDataEncoder().encode(
      args as InitializeUserBurnAllowanceInstructionDataArgs
    ),
    programAddress,
  } as InitializeUserBurnAllowanceInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountOwner,
    TAccountCentralState,
    TAccountUserBurnAllowance,
    TAccountSystemProgram
  >);
}

export type ParsedInitializeUserBurnAllowanceInstruction<
  TProgram extends string = typeof CBMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    payer: TAccountMetas[0];
    /** The user for whom the burn allowance is being initialized */
    owner: TAccountMetas[1];
    centralState: TAccountMetas[2];
    userBurnAllowance: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
  };
  data: InitializeUserBurnAllowanceInstructionData;
};

export function parseInitializeUserBurnAllowanceInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedInitializeUserBurnAllowanceInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      owner: getNextAccount(),
      centralState: getNextAccount(),
      userBurnAllowance: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeUserBurnAllowanceInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
