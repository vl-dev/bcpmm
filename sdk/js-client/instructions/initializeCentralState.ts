/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU32Decoder,
  getU32Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { CPMM_POC_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const INITIALIZE_CENTRAL_STATE_DISCRIMINATOR = new Uint8Array([
  204, 64, 162, 125, 253, 90, 119, 4,
]);

export function getInitializeCentralStateDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_CENTRAL_STATE_DISCRIMINATOR
  );
}

export type InitializeCentralStateInstruction<
  TProgram extends string = typeof CPMM_POC_PROGRAM_ADDRESS,
  TAccountAdmin extends string | AccountMeta<string> = string,
  TAccountCentralState extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAdmin extends string
        ? WritableSignerAccount<TAccountAdmin> &
            AccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountCentralState extends string
        ? WritableAccount<TAccountCentralState>
        : TAccountCentralState,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeCentralStateInstructionData = {
  discriminator: ReadonlyUint8Array;
  maxUserDailyBurnCount: number;
  maxCreatorDailyBurnCount: number;
  userBurnBpX100: number;
  creatorBurnBpX100: number;
  burnResetTimeOfDaySeconds: number;
  creatorFeeBasisPoints: number;
  buybackFeeBasisPoints: number;
  platformFeeBasisPoints: number;
};

export type InitializeCentralStateInstructionDataArgs = {
  maxUserDailyBurnCount: number;
  maxCreatorDailyBurnCount: number;
  userBurnBpX100: number;
  creatorBurnBpX100: number;
  burnResetTimeOfDaySeconds: number;
  creatorFeeBasisPoints: number;
  buybackFeeBasisPoints: number;
  platformFeeBasisPoints: number;
};

export function getInitializeCentralStateInstructionDataEncoder(): FixedSizeEncoder<InitializeCentralStateInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['maxUserDailyBurnCount', getU16Encoder()],
      ['maxCreatorDailyBurnCount', getU16Encoder()],
      ['userBurnBpX100', getU32Encoder()],
      ['creatorBurnBpX100', getU32Encoder()],
      ['burnResetTimeOfDaySeconds', getU32Encoder()],
      ['creatorFeeBasisPoints', getU16Encoder()],
      ['buybackFeeBasisPoints', getU16Encoder()],
      ['platformFeeBasisPoints', getU16Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: INITIALIZE_CENTRAL_STATE_DISCRIMINATOR,
    })
  );
}

export function getInitializeCentralStateInstructionDataDecoder(): FixedSizeDecoder<InitializeCentralStateInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['maxUserDailyBurnCount', getU16Decoder()],
    ['maxCreatorDailyBurnCount', getU16Decoder()],
    ['userBurnBpX100', getU32Decoder()],
    ['creatorBurnBpX100', getU32Decoder()],
    ['burnResetTimeOfDaySeconds', getU32Decoder()],
    ['creatorFeeBasisPoints', getU16Decoder()],
    ['buybackFeeBasisPoints', getU16Decoder()],
    ['platformFeeBasisPoints', getU16Decoder()],
  ]);
}

export function getInitializeCentralStateInstructionDataCodec(): FixedSizeCodec<
  InitializeCentralStateInstructionDataArgs,
  InitializeCentralStateInstructionData
> {
  return combineCodec(
    getInitializeCentralStateInstructionDataEncoder(),
    getInitializeCentralStateInstructionDataDecoder()
  );
}

export type InitializeCentralStateAsyncInput<
  TAccountAdmin extends string = string,
  TAccountCentralState extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  admin: TransactionSigner<TAccountAdmin>;
  centralState?: Address<TAccountCentralState>;
  systemProgram?: Address<TAccountSystemProgram>;
  maxUserDailyBurnCount: InitializeCentralStateInstructionDataArgs['maxUserDailyBurnCount'];
  maxCreatorDailyBurnCount: InitializeCentralStateInstructionDataArgs['maxCreatorDailyBurnCount'];
  userBurnBpX100: InitializeCentralStateInstructionDataArgs['userBurnBpX100'];
  creatorBurnBpX100: InitializeCentralStateInstructionDataArgs['creatorBurnBpX100'];
  burnResetTimeOfDaySeconds: InitializeCentralStateInstructionDataArgs['burnResetTimeOfDaySeconds'];
  creatorFeeBasisPoints: InitializeCentralStateInstructionDataArgs['creatorFeeBasisPoints'];
  buybackFeeBasisPoints: InitializeCentralStateInstructionDataArgs['buybackFeeBasisPoints'];
  platformFeeBasisPoints: InitializeCentralStateInstructionDataArgs['platformFeeBasisPoints'];
};

export async function getInitializeCentralStateInstructionAsync<
  TAccountAdmin extends string,
  TAccountCentralState extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof CPMM_POC_PROGRAM_ADDRESS,
>(
  input: InitializeCentralStateAsyncInput<
    TAccountAdmin,
    TAccountCentralState,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  InitializeCentralStateInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountCentralState,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? CPMM_POC_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    admin: { value: input.admin ?? null, isWritable: true },
    centralState: { value: input.centralState ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.centralState.value) {
    accounts.centralState.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            99, 101, 110, 116, 114, 97, 108, 95, 115, 116, 97, 116, 101,
          ])
        ),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.centralState),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getInitializeCentralStateInstructionDataEncoder().encode(
      args as InitializeCentralStateInstructionDataArgs
    ),
    programAddress,
  } as InitializeCentralStateInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountCentralState,
    TAccountSystemProgram
  >);
}

export type InitializeCentralStateInput<
  TAccountAdmin extends string = string,
  TAccountCentralState extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  admin: TransactionSigner<TAccountAdmin>;
  centralState: Address<TAccountCentralState>;
  systemProgram?: Address<TAccountSystemProgram>;
  maxUserDailyBurnCount: InitializeCentralStateInstructionDataArgs['maxUserDailyBurnCount'];
  maxCreatorDailyBurnCount: InitializeCentralStateInstructionDataArgs['maxCreatorDailyBurnCount'];
  userBurnBpX100: InitializeCentralStateInstructionDataArgs['userBurnBpX100'];
  creatorBurnBpX100: InitializeCentralStateInstructionDataArgs['creatorBurnBpX100'];
  burnResetTimeOfDaySeconds: InitializeCentralStateInstructionDataArgs['burnResetTimeOfDaySeconds'];
  creatorFeeBasisPoints: InitializeCentralStateInstructionDataArgs['creatorFeeBasisPoints'];
  buybackFeeBasisPoints: InitializeCentralStateInstructionDataArgs['buybackFeeBasisPoints'];
  platformFeeBasisPoints: InitializeCentralStateInstructionDataArgs['platformFeeBasisPoints'];
};

export function getInitializeCentralStateInstruction<
  TAccountAdmin extends string,
  TAccountCentralState extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof CPMM_POC_PROGRAM_ADDRESS,
>(
  input: InitializeCentralStateInput<
    TAccountAdmin,
    TAccountCentralState,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeCentralStateInstruction<
  TProgramAddress,
  TAccountAdmin,
  TAccountCentralState,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? CPMM_POC_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    admin: { value: input.admin ?? null, isWritable: true },
    centralState: { value: input.centralState ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.centralState),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getInitializeCentralStateInstructionDataEncoder().encode(
      args as InitializeCentralStateInstructionDataArgs
    ),
    programAddress,
  } as InitializeCentralStateInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountCentralState,
    TAccountSystemProgram
  >);
}

export type ParsedInitializeCentralStateInstruction<
  TProgram extends string = typeof CPMM_POC_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    admin: TAccountMetas[0];
    centralState: TAccountMetas[1];
    systemProgram: TAccountMetas[2];
  };
  data: InitializeCentralStateInstructionData;
};

export function parseInitializeCentralStateInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedInitializeCentralStateInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      admin: getNextAccount(),
      centralState: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeCentralStateInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
