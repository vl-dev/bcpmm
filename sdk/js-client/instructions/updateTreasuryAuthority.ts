/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { CPMM_POC_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const UPDATE_TREASURY_AUTHORITY_DISCRIMINATOR = new Uint8Array([
  185, 149, 66, 195, 105, 183, 32, 244,
]);

export function getUpdateTreasuryAuthorityDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    UPDATE_TREASURY_AUTHORITY_DISCRIMINATOR
  );
}

export type UpdateTreasuryAuthorityInstruction<
  TProgram extends string = typeof CPMM_POC_PROGRAM_ADDRESS,
  TAccountCurrentAuthority extends string | AccountMeta<string> = string,
  TAccountTreasury extends string | AccountMeta<string> = string,
  TAccountAMint extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountCurrentAuthority extends string
        ? WritableSignerAccount<TAccountCurrentAuthority> &
            AccountSignerMeta<TAccountCurrentAuthority>
        : TAccountCurrentAuthority,
      TAccountTreasury extends string
        ? WritableAccount<TAccountTreasury>
        : TAccountTreasury,
      TAccountAMint extends string
        ? ReadonlyAccount<TAccountAMint>
        : TAccountAMint,
      ...TRemainingAccounts,
    ]
  >;

export type UpdateTreasuryAuthorityInstructionData = {
  discriminator: ReadonlyUint8Array;
  newTreasuryAuthority: Address;
};

export type UpdateTreasuryAuthorityInstructionDataArgs = {
  newTreasuryAuthority: Address;
};

export function getUpdateTreasuryAuthorityInstructionDataEncoder(): FixedSizeEncoder<UpdateTreasuryAuthorityInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['newTreasuryAuthority', getAddressEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: UPDATE_TREASURY_AUTHORITY_DISCRIMINATOR,
    })
  );
}

export function getUpdateTreasuryAuthorityInstructionDataDecoder(): FixedSizeDecoder<UpdateTreasuryAuthorityInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['newTreasuryAuthority', getAddressDecoder()],
  ]);
}

export function getUpdateTreasuryAuthorityInstructionDataCodec(): FixedSizeCodec<
  UpdateTreasuryAuthorityInstructionDataArgs,
  UpdateTreasuryAuthorityInstructionData
> {
  return combineCodec(
    getUpdateTreasuryAuthorityInstructionDataEncoder(),
    getUpdateTreasuryAuthorityInstructionDataDecoder()
  );
}

export type UpdateTreasuryAuthorityAsyncInput<
  TAccountCurrentAuthority extends string = string,
  TAccountTreasury extends string = string,
  TAccountAMint extends string = string,
> = {
  currentAuthority: TransactionSigner<TAccountCurrentAuthority>;
  treasury?: Address<TAccountTreasury>;
  aMint: Address<TAccountAMint>;
  newTreasuryAuthority: UpdateTreasuryAuthorityInstructionDataArgs['newTreasuryAuthority'];
};

export async function getUpdateTreasuryAuthorityInstructionAsync<
  TAccountCurrentAuthority extends string,
  TAccountTreasury extends string,
  TAccountAMint extends string,
  TProgramAddress extends Address = typeof CPMM_POC_PROGRAM_ADDRESS,
>(
  input: UpdateTreasuryAuthorityAsyncInput<
    TAccountCurrentAuthority,
    TAccountTreasury,
    TAccountAMint
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  UpdateTreasuryAuthorityInstruction<
    TProgramAddress,
    TAccountCurrentAuthority,
    TAccountTreasury,
    TAccountAMint
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? CPMM_POC_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    currentAuthority: {
      value: input.currentAuthority ?? null,
      isWritable: true,
    },
    treasury: { value: input.treasury ?? null, isWritable: true },
    aMint: { value: input.aMint ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.treasury.value) {
    accounts.treasury.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([116, 114, 101, 97, 115, 117, 114, 121])
        ),
        getAddressEncoder().encode(expectAddress(accounts.aMint.value)),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.currentAuthority),
      getAccountMeta(accounts.treasury),
      getAccountMeta(accounts.aMint),
    ],
    data: getUpdateTreasuryAuthorityInstructionDataEncoder().encode(
      args as UpdateTreasuryAuthorityInstructionDataArgs
    ),
    programAddress,
  } as UpdateTreasuryAuthorityInstruction<
    TProgramAddress,
    TAccountCurrentAuthority,
    TAccountTreasury,
    TAccountAMint
  >);
}

export type UpdateTreasuryAuthorityInput<
  TAccountCurrentAuthority extends string = string,
  TAccountTreasury extends string = string,
  TAccountAMint extends string = string,
> = {
  currentAuthority: TransactionSigner<TAccountCurrentAuthority>;
  treasury: Address<TAccountTreasury>;
  aMint: Address<TAccountAMint>;
  newTreasuryAuthority: UpdateTreasuryAuthorityInstructionDataArgs['newTreasuryAuthority'];
};

export function getUpdateTreasuryAuthorityInstruction<
  TAccountCurrentAuthority extends string,
  TAccountTreasury extends string,
  TAccountAMint extends string,
  TProgramAddress extends Address = typeof CPMM_POC_PROGRAM_ADDRESS,
>(
  input: UpdateTreasuryAuthorityInput<
    TAccountCurrentAuthority,
    TAccountTreasury,
    TAccountAMint
  >,
  config?: { programAddress?: TProgramAddress }
): UpdateTreasuryAuthorityInstruction<
  TProgramAddress,
  TAccountCurrentAuthority,
  TAccountTreasury,
  TAccountAMint
> {
  // Program address.
  const programAddress = config?.programAddress ?? CPMM_POC_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    currentAuthority: {
      value: input.currentAuthority ?? null,
      isWritable: true,
    },
    treasury: { value: input.treasury ?? null, isWritable: true },
    aMint: { value: input.aMint ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.currentAuthority),
      getAccountMeta(accounts.treasury),
      getAccountMeta(accounts.aMint),
    ],
    data: getUpdateTreasuryAuthorityInstructionDataEncoder().encode(
      args as UpdateTreasuryAuthorityInstructionDataArgs
    ),
    programAddress,
  } as UpdateTreasuryAuthorityInstruction<
    TProgramAddress,
    TAccountCurrentAuthority,
    TAccountTreasury,
    TAccountAMint
  >);
}

export type ParsedUpdateTreasuryAuthorityInstruction<
  TProgram extends string = typeof CPMM_POC_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    currentAuthority: TAccountMetas[0];
    treasury: TAccountMetas[1];
    aMint: TAccountMetas[2];
  };
  data: UpdateTreasuryAuthorityInstructionData;
};

export function parseUpdateTreasuryAuthorityInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedUpdateTreasuryAuthorityInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      currentAuthority: getNextAccount(),
      treasury: getNextAccount(),
      aMint: getNextAccount(),
    },
    data: getUpdateTreasuryAuthorityInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
