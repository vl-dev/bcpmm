/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const BCPMM_POOL_DISCRIMINATOR = new Uint8Array([
  176, 79, 229, 1, 239, 41, 66, 21,
]);

export function getBcpmmPoolDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(BCPMM_POOL_DISCRIMINATOR);
}

export type BcpmmPool = {
  discriminator: ReadonlyUint8Array;
  /** Bump seed */
  bump: number;
  /** Pool creator address */
  creator: Address;
  /** Pool index per creator */
  poolIndex: number;
  /** A mint address */
  aMint: Address;
  /** A reserve including decimals */
  aReserve: bigint;
  /** A virtual reserve including decimals */
  aVirtualReserve: bigint;
  aOutstandingTopup: bigint;
  /** B mint decimals */
  bMintDecimals: number;
  /** B reserve including decimals */
  bReserve: bigint;
  /** Creator fees balance denominated in Mint A including decimals */
  creatorFeesBalance: bigint;
  /** Total buyback fees accumulated in Mint A including decimals */
  buybackFeesBalance: bigint;
  /** Creator fee basis points */
  creatorFeeBasisPoints: number;
  /** Buyback fee basis points */
  buybackFeeBasisPoints: number;
  /** Platform fee basis points */
  platformFeeBasisPoints: number;
  /** Burn allowance for the pool */
  burnsToday: number;
  lastBurnTimestamp: bigint;
};

export type BcpmmPoolArgs = {
  /** Bump seed */
  bump: number;
  /** Pool creator address */
  creator: Address;
  /** Pool index per creator */
  poolIndex: number;
  /** A mint address */
  aMint: Address;
  /** A reserve including decimals */
  aReserve: number | bigint;
  /** A virtual reserve including decimals */
  aVirtualReserve: number | bigint;
  aOutstandingTopup: number | bigint;
  /** B mint decimals */
  bMintDecimals: number;
  /** B reserve including decimals */
  bReserve: number | bigint;
  /** Creator fees balance denominated in Mint A including decimals */
  creatorFeesBalance: number | bigint;
  /** Total buyback fees accumulated in Mint A including decimals */
  buybackFeesBalance: number | bigint;
  /** Creator fee basis points */
  creatorFeeBasisPoints: number;
  /** Buyback fee basis points */
  buybackFeeBasisPoints: number;
  /** Platform fee basis points */
  platformFeeBasisPoints: number;
  /** Burn allowance for the pool */
  burnsToday: number;
  lastBurnTimestamp: number | bigint;
};

export function getBcpmmPoolEncoder(): FixedSizeEncoder<BcpmmPoolArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['bump', getU8Encoder()],
      ['creator', getAddressEncoder()],
      ['poolIndex', getU32Encoder()],
      ['aMint', getAddressEncoder()],
      ['aReserve', getU64Encoder()],
      ['aVirtualReserve', getU64Encoder()],
      ['aOutstandingTopup', getU64Encoder()],
      ['bMintDecimals', getU8Encoder()],
      ['bReserve', getU64Encoder()],
      ['creatorFeesBalance', getU64Encoder()],
      ['buybackFeesBalance', getU64Encoder()],
      ['creatorFeeBasisPoints', getU16Encoder()],
      ['buybackFeeBasisPoints', getU16Encoder()],
      ['platformFeeBasisPoints', getU16Encoder()],
      ['burnsToday', getU16Encoder()],
      ['lastBurnTimestamp', getI64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: BCPMM_POOL_DISCRIMINATOR })
  );
}

export function getBcpmmPoolDecoder(): FixedSizeDecoder<BcpmmPool> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['bump', getU8Decoder()],
    ['creator', getAddressDecoder()],
    ['poolIndex', getU32Decoder()],
    ['aMint', getAddressDecoder()],
    ['aReserve', getU64Decoder()],
    ['aVirtualReserve', getU64Decoder()],
    ['aOutstandingTopup', getU64Decoder()],
    ['bMintDecimals', getU8Decoder()],
    ['bReserve', getU64Decoder()],
    ['creatorFeesBalance', getU64Decoder()],
    ['buybackFeesBalance', getU64Decoder()],
    ['creatorFeeBasisPoints', getU16Decoder()],
    ['buybackFeeBasisPoints', getU16Decoder()],
    ['platformFeeBasisPoints', getU16Decoder()],
    ['burnsToday', getU16Decoder()],
    ['lastBurnTimestamp', getI64Decoder()],
  ]);
}

export function getBcpmmPoolCodec(): FixedSizeCodec<BcpmmPoolArgs, BcpmmPool> {
  return combineCodec(getBcpmmPoolEncoder(), getBcpmmPoolDecoder());
}

export function decodeBcpmmPool<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<BcpmmPool, TAddress>;
export function decodeBcpmmPool<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<BcpmmPool, TAddress>;
export function decodeBcpmmPool<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<BcpmmPool, TAddress> | MaybeAccount<BcpmmPool, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getBcpmmPoolDecoder()
  );
}

export async function fetchBcpmmPool<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<BcpmmPool, TAddress>> {
  const maybeAccount = await fetchMaybeBcpmmPool(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeBcpmmPool<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<BcpmmPool, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeBcpmmPool(maybeAccount);
}

export async function fetchAllBcpmmPool(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<BcpmmPool>[]> {
  const maybeAccounts = await fetchAllMaybeBcpmmPool(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeBcpmmPool(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<BcpmmPool>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeBcpmmPool(maybeAccount));
}

export function getBcpmmPoolSize(): number {
  return 142;
}
