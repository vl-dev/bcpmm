/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { CBMM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CLOSE_VIRTUAL_TOKEN_ACCOUNT_DISCRIMINATOR = new Uint8Array([
  27, 182, 37, 28, 100, 111, 12, 0,
]);

export function getCloseVirtualTokenAccountDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CLOSE_VIRTUAL_TOKEN_ACCOUNT_DISCRIMINATOR
  );
}

export type CloseVirtualTokenAccountInstruction<
  TProgram extends string = typeof CBMM_PROGRAM_ADDRESS,
  TAccountOwner extends string | AccountMeta<string> = string,
  TAccountVirtualTokenAccount extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountOwner extends string
        ? WritableSignerAccount<TAccountOwner> &
            AccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountVirtualTokenAccount extends string
        ? WritableAccount<TAccountVirtualTokenAccount>
        : TAccountVirtualTokenAccount,
      ...TRemainingAccounts,
    ]
  >;

export type CloseVirtualTokenAccountInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type CloseVirtualTokenAccountInstructionDataArgs = {};

export function getCloseVirtualTokenAccountInstructionDataEncoder(): FixedSizeEncoder<CloseVirtualTokenAccountInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: CLOSE_VIRTUAL_TOKEN_ACCOUNT_DISCRIMINATOR,
    })
  );
}

export function getCloseVirtualTokenAccountInstructionDataDecoder(): FixedSizeDecoder<CloseVirtualTokenAccountInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getCloseVirtualTokenAccountInstructionDataCodec(): FixedSizeCodec<
  CloseVirtualTokenAccountInstructionDataArgs,
  CloseVirtualTokenAccountInstructionData
> {
  return combineCodec(
    getCloseVirtualTokenAccountInstructionDataEncoder(),
    getCloseVirtualTokenAccountInstructionDataDecoder()
  );
}

export type CloseVirtualTokenAccountInput<
  TAccountOwner extends string = string,
  TAccountVirtualTokenAccount extends string = string,
> = {
  owner: TransactionSigner<TAccountOwner>;
  virtualTokenAccount: Address<TAccountVirtualTokenAccount>;
};

export function getCloseVirtualTokenAccountInstruction<
  TAccountOwner extends string,
  TAccountVirtualTokenAccount extends string,
  TProgramAddress extends Address = typeof CBMM_PROGRAM_ADDRESS,
>(
  input: CloseVirtualTokenAccountInput<
    TAccountOwner,
    TAccountVirtualTokenAccount
  >,
  config?: { programAddress?: TProgramAddress }
): CloseVirtualTokenAccountInstruction<
  TProgramAddress,
  TAccountOwner,
  TAccountVirtualTokenAccount
> {
  // Program address.
  const programAddress = config?.programAddress ?? CBMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: true },
    virtualTokenAccount: {
      value: input.virtualTokenAccount ?? null,
      isWritable: true,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.virtualTokenAccount),
    ],
    data: getCloseVirtualTokenAccountInstructionDataEncoder().encode({}),
    programAddress,
  } as CloseVirtualTokenAccountInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountVirtualTokenAccount
  >);
}

export type ParsedCloseVirtualTokenAccountInstruction<
  TProgram extends string = typeof CBMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    owner: TAccountMetas[0];
    virtualTokenAccount: TAccountMetas[1];
  };
  data: CloseVirtualTokenAccountInstructionData;
};

export function parseCloseVirtualTokenAccountInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCloseVirtualTokenAccountInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      owner: getNextAccount(),
      virtualTokenAccount: getNextAccount(),
    },
    data: getCloseVirtualTokenAccountInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
