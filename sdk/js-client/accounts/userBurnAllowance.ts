/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const USER_BURN_ALLOWANCE_DISCRIMINATOR = new Uint8Array([
  154, 213, 227, 142, 136, 30, 145, 155,
]);

export function getUserBurnAllowanceDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    USER_BURN_ALLOWANCE_DISCRIMINATOR
  );
}

export type UserBurnAllowance = {
  discriminator: ReadonlyUint8Array;
  bump: number;
  user: Address;
  payer: Address;
  burnsToday: number;
  lastBurnTimestamp: bigint;
};

export type UserBurnAllowanceArgs = {
  bump: number;
  user: Address;
  payer: Address;
  burnsToday: number;
  lastBurnTimestamp: number | bigint;
};

export function getUserBurnAllowanceEncoder(): FixedSizeEncoder<UserBurnAllowanceArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['bump', getU8Encoder()],
      ['user', getAddressEncoder()],
      ['payer', getAddressEncoder()],
      ['burnsToday', getU16Encoder()],
      ['lastBurnTimestamp', getI64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: USER_BURN_ALLOWANCE_DISCRIMINATOR })
  );
}

export function getUserBurnAllowanceDecoder(): FixedSizeDecoder<UserBurnAllowance> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['bump', getU8Decoder()],
    ['user', getAddressDecoder()],
    ['payer', getAddressDecoder()],
    ['burnsToday', getU16Decoder()],
    ['lastBurnTimestamp', getI64Decoder()],
  ]);
}

export function getUserBurnAllowanceCodec(): FixedSizeCodec<
  UserBurnAllowanceArgs,
  UserBurnAllowance
> {
  return combineCodec(
    getUserBurnAllowanceEncoder(),
    getUserBurnAllowanceDecoder()
  );
}

export function decodeUserBurnAllowance<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<UserBurnAllowance, TAddress>;
export function decodeUserBurnAllowance<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<UserBurnAllowance, TAddress>;
export function decodeUserBurnAllowance<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<UserBurnAllowance, TAddress>
  | MaybeAccount<UserBurnAllowance, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getUserBurnAllowanceDecoder()
  );
}

export async function fetchUserBurnAllowance<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<UserBurnAllowance, TAddress>> {
  const maybeAccount = await fetchMaybeUserBurnAllowance(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeUserBurnAllowance<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<UserBurnAllowance, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeUserBurnAllowance(maybeAccount);
}

export async function fetchAllUserBurnAllowance(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<UserBurnAllowance>[]> {
  const maybeAccounts = await fetchAllMaybeUserBurnAllowance(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeUserBurnAllowance(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<UserBurnAllowance>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeUserBurnAllowance(maybeAccount)
  );
}

export function getUserBurnAllowanceSize(): number {
  return 83;
}
