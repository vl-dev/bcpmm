/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type WritableAccount,
} from '@solana/kit';
import { CPMM_POC_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CLOSE_USER_BURN_ALLOWANCE_DISCRIMINATOR = new Uint8Array([
  217, 24, 207, 62, 181, 123, 16, 187,
]);

export function getCloseUserBurnAllowanceDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CLOSE_USER_BURN_ALLOWANCE_DISCRIMINATOR
  );
}

export type CloseUserBurnAllowanceInstruction<
  TProgram extends string = typeof CPMM_POC_PROGRAM_ADDRESS,
  TAccountOwner extends string | AccountMeta<string> = string,
  TAccountUserBurnAllowance extends string | AccountMeta<string> = string,
  TAccountBurnAllowanceOpenPayer extends string | AccountMeta<string> = string,
  TAccountCentralState extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountOwner extends string
        ? ReadonlyAccount<TAccountOwner>
        : TAccountOwner,
      TAccountUserBurnAllowance extends string
        ? WritableAccount<TAccountUserBurnAllowance>
        : TAccountUserBurnAllowance,
      TAccountBurnAllowanceOpenPayer extends string
        ? ReadonlyAccount<TAccountBurnAllowanceOpenPayer>
        : TAccountBurnAllowanceOpenPayer,
      TAccountCentralState extends string
        ? ReadonlyAccount<TAccountCentralState>
        : TAccountCentralState,
      ...TRemainingAccounts,
    ]
  >;

export type CloseUserBurnAllowanceInstructionData = {
  discriminator: ReadonlyUint8Array;
  poolOwner: boolean;
};

export type CloseUserBurnAllowanceInstructionDataArgs = { poolOwner: boolean };

export function getCloseUserBurnAllowanceInstructionDataEncoder(): FixedSizeEncoder<CloseUserBurnAllowanceInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['poolOwner', getBooleanEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: CLOSE_USER_BURN_ALLOWANCE_DISCRIMINATOR,
    })
  );
}

export function getCloseUserBurnAllowanceInstructionDataDecoder(): FixedSizeDecoder<CloseUserBurnAllowanceInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['poolOwner', getBooleanDecoder()],
  ]);
}

export function getCloseUserBurnAllowanceInstructionDataCodec(): FixedSizeCodec<
  CloseUserBurnAllowanceInstructionDataArgs,
  CloseUserBurnAllowanceInstructionData
> {
  return combineCodec(
    getCloseUserBurnAllowanceInstructionDataEncoder(),
    getCloseUserBurnAllowanceInstructionDataDecoder()
  );
}

export type CloseUserBurnAllowanceAsyncInput<
  TAccountOwner extends string = string,
  TAccountUserBurnAllowance extends string = string,
  TAccountBurnAllowanceOpenPayer extends string = string,
  TAccountCentralState extends string = string,
> = {
  /** The user whose burn allowance is being closed */
  owner: Address<TAccountOwner>;
  userBurnAllowance: Address<TAccountUserBurnAllowance>;
  burnAllowanceOpenPayer: Address<TAccountBurnAllowanceOpenPayer>;
  centralState?: Address<TAccountCentralState>;
  poolOwner: CloseUserBurnAllowanceInstructionDataArgs['poolOwner'];
};

export async function getCloseUserBurnAllowanceInstructionAsync<
  TAccountOwner extends string,
  TAccountUserBurnAllowance extends string,
  TAccountBurnAllowanceOpenPayer extends string,
  TAccountCentralState extends string,
  TProgramAddress extends Address = typeof CPMM_POC_PROGRAM_ADDRESS,
>(
  input: CloseUserBurnAllowanceAsyncInput<
    TAccountOwner,
    TAccountUserBurnAllowance,
    TAccountBurnAllowanceOpenPayer,
    TAccountCentralState
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CloseUserBurnAllowanceInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountUserBurnAllowance,
    TAccountBurnAllowanceOpenPayer,
    TAccountCentralState
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? CPMM_POC_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: false },
    userBurnAllowance: {
      value: input.userBurnAllowance ?? null,
      isWritable: true,
    },
    burnAllowanceOpenPayer: {
      value: input.burnAllowanceOpenPayer ?? null,
      isWritable: false,
    },
    centralState: { value: input.centralState ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.centralState.value) {
    accounts.centralState.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            99, 101, 110, 116, 114, 97, 108, 95, 115, 116, 97, 116, 101,
          ])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.userBurnAllowance),
      getAccountMeta(accounts.burnAllowanceOpenPayer),
      getAccountMeta(accounts.centralState),
    ],
    data: getCloseUserBurnAllowanceInstructionDataEncoder().encode(
      args as CloseUserBurnAllowanceInstructionDataArgs
    ),
    programAddress,
  } as CloseUserBurnAllowanceInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountUserBurnAllowance,
    TAccountBurnAllowanceOpenPayer,
    TAccountCentralState
  >);
}

export type CloseUserBurnAllowanceInput<
  TAccountOwner extends string = string,
  TAccountUserBurnAllowance extends string = string,
  TAccountBurnAllowanceOpenPayer extends string = string,
  TAccountCentralState extends string = string,
> = {
  /** The user whose burn allowance is being closed */
  owner: Address<TAccountOwner>;
  userBurnAllowance: Address<TAccountUserBurnAllowance>;
  burnAllowanceOpenPayer: Address<TAccountBurnAllowanceOpenPayer>;
  centralState: Address<TAccountCentralState>;
  poolOwner: CloseUserBurnAllowanceInstructionDataArgs['poolOwner'];
};

export function getCloseUserBurnAllowanceInstruction<
  TAccountOwner extends string,
  TAccountUserBurnAllowance extends string,
  TAccountBurnAllowanceOpenPayer extends string,
  TAccountCentralState extends string,
  TProgramAddress extends Address = typeof CPMM_POC_PROGRAM_ADDRESS,
>(
  input: CloseUserBurnAllowanceInput<
    TAccountOwner,
    TAccountUserBurnAllowance,
    TAccountBurnAllowanceOpenPayer,
    TAccountCentralState
  >,
  config?: { programAddress?: TProgramAddress }
): CloseUserBurnAllowanceInstruction<
  TProgramAddress,
  TAccountOwner,
  TAccountUserBurnAllowance,
  TAccountBurnAllowanceOpenPayer,
  TAccountCentralState
> {
  // Program address.
  const programAddress = config?.programAddress ?? CPMM_POC_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: false },
    userBurnAllowance: {
      value: input.userBurnAllowance ?? null,
      isWritable: true,
    },
    burnAllowanceOpenPayer: {
      value: input.burnAllowanceOpenPayer ?? null,
      isWritable: false,
    },
    centralState: { value: input.centralState ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.userBurnAllowance),
      getAccountMeta(accounts.burnAllowanceOpenPayer),
      getAccountMeta(accounts.centralState),
    ],
    data: getCloseUserBurnAllowanceInstructionDataEncoder().encode(
      args as CloseUserBurnAllowanceInstructionDataArgs
    ),
    programAddress,
  } as CloseUserBurnAllowanceInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountUserBurnAllowance,
    TAccountBurnAllowanceOpenPayer,
    TAccountCentralState
  >);
}

export type ParsedCloseUserBurnAllowanceInstruction<
  TProgram extends string = typeof CPMM_POC_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The user whose burn allowance is being closed */
    owner: TAccountMetas[0];
    userBurnAllowance: TAccountMetas[1];
    burnAllowanceOpenPayer: TAccountMetas[2];
    centralState: TAccountMetas[3];
  };
  data: CloseUserBurnAllowanceInstructionData;
};

export function parseCloseUserBurnAllowanceInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCloseUserBurnAllowanceInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      owner: getNextAccount(),
      userBurnAllowance: getNextAccount(),
      burnAllowanceOpenPayer: getNextAccount(),
      centralState: getNextAccount(),
    },
    data: getCloseUserBurnAllowanceInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
