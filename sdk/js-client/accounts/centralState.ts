/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const CENTRAL_STATE_DISCRIMINATOR = new Uint8Array([
  201, 49, 35, 231, 4, 164, 205, 91,
]);

export function getCentralStateDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CENTRAL_STATE_DISCRIMINATOR
  );
}

export type CentralState = {
  discriminator: ReadonlyUint8Array;
  bump: number;
  admin: Address;
  maxUserDailyBurnCount: number;
  maxCreatorDailyBurnCount: number;
  userBurnBpX100: number;
  creatorBurnBpX100: number;
  burnResetTimeOfDaySeconds: number;
};

export type CentralStateArgs = {
  bump: number;
  admin: Address;
  maxUserDailyBurnCount: number;
  maxCreatorDailyBurnCount: number;
  userBurnBpX100: number;
  creatorBurnBpX100: number;
  burnResetTimeOfDaySeconds: number;
};

export function getCentralStateEncoder(): FixedSizeEncoder<CentralStateArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['bump', getU8Encoder()],
      ['admin', getAddressEncoder()],
      ['maxUserDailyBurnCount', getU16Encoder()],
      ['maxCreatorDailyBurnCount', getU16Encoder()],
      ['userBurnBpX100', getU32Encoder()],
      ['creatorBurnBpX100', getU32Encoder()],
      ['burnResetTimeOfDaySeconds', getU32Encoder()],
    ]),
    (value) => ({ ...value, discriminator: CENTRAL_STATE_DISCRIMINATOR })
  );
}

export function getCentralStateDecoder(): FixedSizeDecoder<CentralState> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['bump', getU8Decoder()],
    ['admin', getAddressDecoder()],
    ['maxUserDailyBurnCount', getU16Decoder()],
    ['maxCreatorDailyBurnCount', getU16Decoder()],
    ['userBurnBpX100', getU32Decoder()],
    ['creatorBurnBpX100', getU32Decoder()],
    ['burnResetTimeOfDaySeconds', getU32Decoder()],
  ]);
}

export function getCentralStateCodec(): FixedSizeCodec<
  CentralStateArgs,
  CentralState
> {
  return combineCodec(getCentralStateEncoder(), getCentralStateDecoder());
}

export function decodeCentralState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<CentralState, TAddress>;
export function decodeCentralState<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<CentralState, TAddress>;
export function decodeCentralState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<CentralState, TAddress> | MaybeAccount<CentralState, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getCentralStateDecoder()
  );
}

export async function fetchCentralState<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<CentralState, TAddress>> {
  const maybeAccount = await fetchMaybeCentralState(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeCentralState<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<CentralState, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeCentralState(maybeAccount);
}

export async function fetchAllCentralState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<CentralState>[]> {
  const maybeAccounts = await fetchAllMaybeCentralState(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeCentralState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<CentralState>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeCentralState(maybeAccount));
}

export function getCentralStateSize(): number {
  return 57;
}
