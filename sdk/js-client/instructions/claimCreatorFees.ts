/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { CBMM_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CLAIM_CREATOR_FEES_DISCRIMINATOR = new Uint8Array([
  0, 23, 125, 234, 156, 118, 134, 89,
]);

export function getClaimCreatorFeesDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CLAIM_CREATOR_FEES_DISCRIMINATOR
  );
}

export type ClaimCreatorFeesInstruction<
  TProgram extends string = typeof CBMM_PROGRAM_ADDRESS,
  TAccountOwner extends string | AccountMeta<string> = string,
  TAccountOwnerAta extends string | AccountMeta<string> = string,
  TAccountCentralState extends string | AccountMeta<string> = string,
  TAccountPool extends string | AccountMeta<string> = string,
  TAccountPoolAta extends string | AccountMeta<string> = string,
  TAccountAMint extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountOwner extends string
        ? WritableSignerAccount<TAccountOwner> &
            AccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountOwnerAta extends string
        ? WritableAccount<TAccountOwnerAta>
        : TAccountOwnerAta,
      TAccountCentralState extends string
        ? WritableAccount<TAccountCentralState>
        : TAccountCentralState,
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountPoolAta extends string
        ? WritableAccount<TAccountPoolAta>
        : TAccountPoolAta,
      TAccountAMint extends string
        ? ReadonlyAccount<TAccountAMint>
        : TAccountAMint,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ClaimCreatorFeesInstructionData = {
  discriminator: ReadonlyUint8Array;
  amount: bigint;
};

export type ClaimCreatorFeesInstructionDataArgs = { amount: number | bigint };

export function getClaimCreatorFeesInstructionDataEncoder(): FixedSizeEncoder<ClaimCreatorFeesInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: CLAIM_CREATOR_FEES_DISCRIMINATOR })
  );
}

export function getClaimCreatorFeesInstructionDataDecoder(): FixedSizeDecoder<ClaimCreatorFeesInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amount', getU64Decoder()],
  ]);
}

export function getClaimCreatorFeesInstructionDataCodec(): FixedSizeCodec<
  ClaimCreatorFeesInstructionDataArgs,
  ClaimCreatorFeesInstructionData
> {
  return combineCodec(
    getClaimCreatorFeesInstructionDataEncoder(),
    getClaimCreatorFeesInstructionDataDecoder()
  );
}

export type ClaimCreatorFeesAsyncInput<
  TAccountOwner extends string = string,
  TAccountOwnerAta extends string = string,
  TAccountCentralState extends string = string,
  TAccountPool extends string = string,
  TAccountPoolAta extends string = string,
  TAccountAMint extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  owner: TransactionSigner<TAccountOwner>;
  ownerAta?: Address<TAccountOwnerAta>;
  centralState?: Address<TAccountCentralState>;
  pool: Address<TAccountPool>;
  poolAta?: Address<TAccountPoolAta>;
  aMint: Address<TAccountAMint>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  amount: ClaimCreatorFeesInstructionDataArgs['amount'];
};

export async function getClaimCreatorFeesInstructionAsync<
  TAccountOwner extends string,
  TAccountOwnerAta extends string,
  TAccountCentralState extends string,
  TAccountPool extends string,
  TAccountPoolAta extends string,
  TAccountAMint extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof CBMM_PROGRAM_ADDRESS,
>(
  input: ClaimCreatorFeesAsyncInput<
    TAccountOwner,
    TAccountOwnerAta,
    TAccountCentralState,
    TAccountPool,
    TAccountPoolAta,
    TAccountAMint,
    TAccountTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  ClaimCreatorFeesInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountOwnerAta,
    TAccountCentralState,
    TAccountPool,
    TAccountPoolAta,
    TAccountAMint,
    TAccountTokenProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? CBMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: true },
    ownerAta: { value: input.ownerAta ?? null, isWritable: true },
    centralState: { value: input.centralState ?? null, isWritable: true },
    pool: { value: input.pool ?? null, isWritable: true },
    poolAta: { value: input.poolAta ?? null, isWritable: true },
    aMint: { value: input.aMint ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.ownerAta.value) {
    accounts.ownerAta.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.owner.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.aMint.value)),
      ],
    });
  }
  if (!accounts.centralState.value) {
    accounts.centralState.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            99, 101, 110, 116, 114, 97, 108, 95, 115, 116, 97, 116, 101,
          ])
        ),
      ],
    });
  }
  if (!accounts.poolAta.value) {
    accounts.poolAta.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.pool.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.aMint.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.ownerAta),
      getAccountMeta(accounts.centralState),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.poolAta),
      getAccountMeta(accounts.aMint),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getClaimCreatorFeesInstructionDataEncoder().encode(
      args as ClaimCreatorFeesInstructionDataArgs
    ),
    programAddress,
  } as ClaimCreatorFeesInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountOwnerAta,
    TAccountCentralState,
    TAccountPool,
    TAccountPoolAta,
    TAccountAMint,
    TAccountTokenProgram,
    TAccountSystemProgram
  >);
}

export type ClaimCreatorFeesInput<
  TAccountOwner extends string = string,
  TAccountOwnerAta extends string = string,
  TAccountCentralState extends string = string,
  TAccountPool extends string = string,
  TAccountPoolAta extends string = string,
  TAccountAMint extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  owner: TransactionSigner<TAccountOwner>;
  ownerAta: Address<TAccountOwnerAta>;
  centralState: Address<TAccountCentralState>;
  pool: Address<TAccountPool>;
  poolAta: Address<TAccountPoolAta>;
  aMint: Address<TAccountAMint>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  amount: ClaimCreatorFeesInstructionDataArgs['amount'];
};

export function getClaimCreatorFeesInstruction<
  TAccountOwner extends string,
  TAccountOwnerAta extends string,
  TAccountCentralState extends string,
  TAccountPool extends string,
  TAccountPoolAta extends string,
  TAccountAMint extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof CBMM_PROGRAM_ADDRESS,
>(
  input: ClaimCreatorFeesInput<
    TAccountOwner,
    TAccountOwnerAta,
    TAccountCentralState,
    TAccountPool,
    TAccountPoolAta,
    TAccountAMint,
    TAccountTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ClaimCreatorFeesInstruction<
  TProgramAddress,
  TAccountOwner,
  TAccountOwnerAta,
  TAccountCentralState,
  TAccountPool,
  TAccountPoolAta,
  TAccountAMint,
  TAccountTokenProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? CBMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: true },
    ownerAta: { value: input.ownerAta ?? null, isWritable: true },
    centralState: { value: input.centralState ?? null, isWritable: true },
    pool: { value: input.pool ?? null, isWritable: true },
    poolAta: { value: input.poolAta ?? null, isWritable: true },
    aMint: { value: input.aMint ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.ownerAta),
      getAccountMeta(accounts.centralState),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.poolAta),
      getAccountMeta(accounts.aMint),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getClaimCreatorFeesInstructionDataEncoder().encode(
      args as ClaimCreatorFeesInstructionDataArgs
    ),
    programAddress,
  } as ClaimCreatorFeesInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountOwnerAta,
    TAccountCentralState,
    TAccountPool,
    TAccountPoolAta,
    TAccountAMint,
    TAccountTokenProgram,
    TAccountSystemProgram
  >);
}

export type ParsedClaimCreatorFeesInstruction<
  TProgram extends string = typeof CBMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    owner: TAccountMetas[0];
    ownerAta: TAccountMetas[1];
    centralState: TAccountMetas[2];
    pool: TAccountMetas[3];
    poolAta: TAccountMetas[4];
    aMint: TAccountMetas[5];
    tokenProgram: TAccountMetas[6];
    systemProgram: TAccountMetas[7];
  };
  data: ClaimCreatorFeesInstructionData;
};

export function parseClaimCreatorFeesInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedClaimCreatorFeesInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      owner: getNextAccount(),
      ownerAta: getNextAccount(),
      centralState: getNextAccount(),
      pool: getNextAccount(),
      poolAta: getNextAccount(),
      aMint: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getClaimCreatorFeesInstructionDataDecoder().decode(instruction.data),
  };
}
