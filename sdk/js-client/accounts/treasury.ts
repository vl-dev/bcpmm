/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const TREASURY_DISCRIMINATOR = new Uint8Array([
  238, 239, 123, 238, 89, 1, 168, 253,
]);

export function getTreasuryDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(TREASURY_DISCRIMINATOR);
}

export type Treasury = {
  discriminator: ReadonlyUint8Array;
  authority: Address;
  bump: number;
  feesAvailable: bigint;
};

export type TreasuryArgs = {
  authority: Address;
  bump: number;
  feesAvailable: number | bigint;
};

export function getTreasuryEncoder(): FixedSizeEncoder<TreasuryArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['authority', getAddressEncoder()],
      ['bump', getU8Encoder()],
      ['feesAvailable', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: TREASURY_DISCRIMINATOR })
  );
}

export function getTreasuryDecoder(): FixedSizeDecoder<Treasury> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['authority', getAddressDecoder()],
    ['bump', getU8Decoder()],
    ['feesAvailable', getU64Decoder()],
  ]);
}

export function getTreasuryCodec(): FixedSizeCodec<TreasuryArgs, Treasury> {
  return combineCodec(getTreasuryEncoder(), getTreasuryDecoder());
}

export function decodeTreasury<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Treasury, TAddress>;
export function decodeTreasury<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Treasury, TAddress>;
export function decodeTreasury<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Treasury, TAddress> | MaybeAccount<Treasury, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getTreasuryDecoder()
  );
}

export async function fetchTreasury<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Treasury, TAddress>> {
  const maybeAccount = await fetchMaybeTreasury(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeTreasury<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Treasury, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeTreasury(maybeAccount);
}

export async function fetchAllTreasury(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Treasury>[]> {
  const maybeAccounts = await fetchAllMaybeTreasury(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeTreasury(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Treasury>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeTreasury(maybeAccount));
}

export function getTreasurySize(): number {
  return 49;
}
