//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use num_derive::FromPrimitive;
use thiserror::Error;

#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum CpmmPocError {
    /// 6000 - Insufficient virtual token balance
    #[error("Insufficient virtual token balance")]
    InsufficientVirtualTokenBalance = 0x1770,
    /// 6001 - Amount too small
    #[error("Amount too small")]
    AmountTooSmall = 0x1771,
    /// 6002 - Invalid owner
    #[error("Invalid owner")]
    InvalidOwner = 0x1772,
    /// 6003 - Nonzero balance
    #[error("Nonzero balance")]
    NonzeroBalance = 0x1773,
    /// 6004 - Invalid fee basis points
    #[error("Invalid fee basis points")]
    InvalidFeeBasisPoints = 0x1774,
    /// 6005 - Amount too big
    #[error("Amount too big")]
    AmountTooBig = 0x1775,
    /// 6006 - Slippage exceeded
    #[error("Slippage exceeded")]
    SlippageExceeded = 0x1776,
    /// 6007 - Insufficient burn allowance
    #[error("Insufficient burn allowance")]
    InsufficientBurnAllowance = 0x1777,
    /// 6008 - Cannot close active burn allowance
    #[error("Cannot close active burn allowance")]
    CannotCloseActiveBurnAllowance = 0x1778,
    /// 6009 - Invalid burn account payer
    #[error("Invalid burn account payer")]
    InvalidBurnAccountPayer = 0x1779,
    /// 6010 - Invalid virtual reserve
    #[error("Invalid virtual reserve")]
    InvalidVirtualReserve = 0x177A,
    /// 6011 - Invalid buyback fee basis points
    #[error("Invalid buyback fee basis points")]
    InvalidBuybackFeeBasisPoints = 0x177B,
    /// 6012 - Underflow
    #[error("Underflow")]
    Underflow = 0x177C,
    /// 6013 - Invalid pool owner
    #[error("Invalid pool owner")]
    InvalidPoolOwner = 0x177D,
    /// 6014 - Invalid mint
    #[error("Invalid mint")]
    InvalidMint = 0x177E,
}

impl From<CpmmPocError> for solana_program_error::ProgramError {
    fn from(e: CpmmPocError) -> Self {
        solana_program_error::ProgramError::Custom(e as u32)
    }
}

