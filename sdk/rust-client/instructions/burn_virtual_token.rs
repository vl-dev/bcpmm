//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshSerialize;
use borsh::BorshDeserialize;

pub const BURN_VIRTUAL_TOKEN_DISCRIMINATOR: [u8; 8] = [27, 21, 118, 210, 92, 230, 68, 59];

/// Accounts.
#[derive(Debug)]
pub struct BurnVirtualToken {
      
              
          pub signer: solana_pubkey::Pubkey,
          
              
          pub pool: solana_pubkey::Pubkey,
          
              
          pub user_burn_allowance: solana_pubkey::Pubkey,
          
              
          pub central_state: solana_pubkey::Pubkey,
      }

impl BurnVirtualToken {
  pub fn instruction(&self, args: BurnVirtualTokenInstructionArgs) -> solana_instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: BurnVirtualTokenInstructionArgs, remaining_accounts: &[solana_instruction::AccountMeta]) -> solana_instruction::Instruction {
    let mut accounts = Vec::with_capacity(4+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new(
            self.signer,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.pool,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.user_burn_allowance,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.central_state,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = BurnVirtualTokenInstructionData::new().try_to_vec().unwrap();
          let mut args = args.try_to_vec().unwrap();
      data.append(&mut args);
    
    solana_instruction::Instruction {
      program_id: crate::CBMM_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct BurnVirtualTokenInstructionData {
            discriminator: [u8; 8],
            }

impl BurnVirtualTokenInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [27, 21, 118, 210, 92, 230, 68, 59],
                                }
  }

    pub(crate) fn try_to_vec(&self) -> Result<Vec<u8>, std::io::Error> {
    borsh::to_vec(self)
  }
  }

impl Default for BurnVirtualTokenInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct BurnVirtualTokenInstructionArgs {
                  pub pool_owner: bool,
      }

impl BurnVirtualTokenInstructionArgs {
  pub(crate) fn try_to_vec(&self) -> Result<Vec<u8>, std::io::Error> {
    borsh::to_vec(self)
  }
}


/// Instruction builder for `BurnVirtualToken`.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` signer
                ///   1. `[writable]` pool
                ///   2. `[writable]` user_burn_allowance
                ///   3. `[writable]` central_state
#[derive(Clone, Debug, Default)]
pub struct BurnVirtualTokenBuilder {
            signer: Option<solana_pubkey::Pubkey>,
                pool: Option<solana_pubkey::Pubkey>,
                user_burn_allowance: Option<solana_pubkey::Pubkey>,
                central_state: Option<solana_pubkey::Pubkey>,
                        pool_owner: Option<bool>,
        __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl BurnVirtualTokenBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn signer(&mut self, signer: solana_pubkey::Pubkey) -> &mut Self {
                        self.signer = Some(signer);
                    self
    }
            #[inline(always)]
    pub fn pool(&mut self, pool: solana_pubkey::Pubkey) -> &mut Self {
                        self.pool = Some(pool);
                    self
    }
            #[inline(always)]
    pub fn user_burn_allowance(&mut self, user_burn_allowance: solana_pubkey::Pubkey) -> &mut Self {
                        self.user_burn_allowance = Some(user_burn_allowance);
                    self
    }
            #[inline(always)]
    pub fn central_state(&mut self, central_state: solana_pubkey::Pubkey) -> &mut Self {
                        self.central_state = Some(central_state);
                    self
    }
                    #[inline(always)]
      pub fn pool_owner(&mut self, pool_owner: bool) -> &mut Self {
        self.pool_owner = Some(pool_owner);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_instruction::Instruction {
    let accounts = BurnVirtualToken {
                              signer: self.signer.expect("signer is not set"),
                                        pool: self.pool.expect("pool is not set"),
                                        user_burn_allowance: self.user_burn_allowance.expect("user_burn_allowance is not set"),
                                        central_state: self.central_state.expect("central_state is not set"),
                      };
          let args = BurnVirtualTokenInstructionArgs {
                                                              pool_owner: self.pool_owner.clone().expect("pool_owner is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `burn_virtual_token` CPI accounts.
  pub struct BurnVirtualTokenCpiAccounts<'a, 'b> {
          
                    
              pub signer: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub pool: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub user_burn_allowance: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub central_state: &'b solana_account_info::AccountInfo<'a>,
            }

/// `burn_virtual_token` CPI instruction.
pub struct BurnVirtualTokenCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_account_info::AccountInfo<'a>,
      
              
          pub signer: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub pool: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub user_burn_allowance: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub central_state: &'b solana_account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: BurnVirtualTokenInstructionArgs,
  }

impl<'a, 'b> BurnVirtualTokenCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_account_info::AccountInfo<'a>,
          accounts: BurnVirtualTokenCpiAccounts<'a, 'b>,
              args: BurnVirtualTokenInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              signer: accounts.signer,
              pool: accounts.pool,
              user_burn_allowance: accounts.user_burn_allowance,
              central_state: accounts.central_state,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program_error::ProgramResult {
    let mut accounts = Vec::with_capacity(4+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new(
            *self.signer.key,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.pool.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.user_burn_allowance.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.central_state.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = BurnVirtualTokenInstructionData::new().try_to_vec().unwrap();
          let mut args = self.__args.try_to_vec().unwrap();
      data.append(&mut args);
    
    let instruction = solana_instruction::Instruction {
      program_id: crate::CBMM_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(5 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.signer.clone());
                        account_infos.push(self.pool.clone());
                        account_infos.push(self.user_burn_allowance.clone());
                        account_infos.push(self.central_state.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_cpi::invoke(&instruction, &account_infos)
    } else {
      solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `BurnVirtualToken` via CPI.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` signer
                ///   1. `[writable]` pool
                ///   2. `[writable]` user_burn_allowance
                ///   3. `[writable]` central_state
#[derive(Clone, Debug)]
pub struct BurnVirtualTokenCpiBuilder<'a, 'b> {
  instruction: Box<BurnVirtualTokenCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> BurnVirtualTokenCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(BurnVirtualTokenCpiBuilderInstruction {
      __program: program,
              signer: None,
              pool: None,
              user_burn_allowance: None,
              central_state: None,
                                            pool_owner: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn signer(&mut self, signer: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.signer = Some(signer);
                    self
    }
      #[inline(always)]
    pub fn pool(&mut self, pool: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.pool = Some(pool);
                    self
    }
      #[inline(always)]
    pub fn user_burn_allowance(&mut self, user_burn_allowance: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.user_burn_allowance = Some(user_burn_allowance);
                    self
    }
      #[inline(always)]
    pub fn central_state(&mut self, central_state: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.central_state = Some(central_state);
                    self
    }
                    #[inline(always)]
      pub fn pool_owner(&mut self, pool_owner: bool) -> &mut Self {
        self.instruction.pool_owner = Some(pool_owner);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_error::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
          let args = BurnVirtualTokenInstructionArgs {
                                                              pool_owner: self.instruction.pool_owner.clone().expect("pool_owner is not set"),
                                    };
        let instruction = BurnVirtualTokenCpi {
        __program: self.instruction.__program,
                  
          signer: self.instruction.signer.expect("signer is not set"),
                  
          pool: self.instruction.pool.expect("pool is not set"),
                  
          user_burn_allowance: self.instruction.user_burn_allowance.expect("user_burn_allowance is not set"),
                  
          central_state: self.instruction.central_state.expect("central_state is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct BurnVirtualTokenCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_account_info::AccountInfo<'a>,
            signer: Option<&'b solana_account_info::AccountInfo<'a>>,
                pool: Option<&'b solana_account_info::AccountInfo<'a>>,
                user_burn_allowance: Option<&'b solana_account_info::AccountInfo<'a>>,
                central_state: Option<&'b solana_account_info::AccountInfo<'a>>,
                        pool_owner: Option<bool>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}

