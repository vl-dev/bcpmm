/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { CBMM_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const INITIALIZE_VIRTUAL_TOKEN_ACCOUNT_DISCRIMINATOR = new Uint8Array([
  188, 135, 151, 109, 183, 234, 240, 3,
]);

export function getInitializeVirtualTokenAccountDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_VIRTUAL_TOKEN_ACCOUNT_DISCRIMINATOR
  );
}

export type InitializeVirtualTokenAccountInstruction<
  TProgram extends string = typeof CBMM_PROGRAM_ADDRESS,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountOwner extends string | AccountMeta<string> = string,
  TAccountVirtualTokenAccount extends string | AccountMeta<string> = string,
  TAccountPool extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountOwner extends string
        ? ReadonlyAccount<TAccountOwner>
        : TAccountOwner,
      TAccountVirtualTokenAccount extends string
        ? WritableAccount<TAccountVirtualTokenAccount>
        : TAccountVirtualTokenAccount,
      TAccountPool extends string
        ? ReadonlyAccount<TAccountPool>
        : TAccountPool,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeVirtualTokenAccountInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type InitializeVirtualTokenAccountInstructionDataArgs = {};

export function getInitializeVirtualTokenAccountInstructionDataEncoder(): FixedSizeEncoder<InitializeVirtualTokenAccountInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: INITIALIZE_VIRTUAL_TOKEN_ACCOUNT_DISCRIMINATOR,
    })
  );
}

export function getInitializeVirtualTokenAccountInstructionDataDecoder(): FixedSizeDecoder<InitializeVirtualTokenAccountInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getInitializeVirtualTokenAccountInstructionDataCodec(): FixedSizeCodec<
  InitializeVirtualTokenAccountInstructionDataArgs,
  InitializeVirtualTokenAccountInstructionData
> {
  return combineCodec(
    getInitializeVirtualTokenAccountInstructionDataEncoder(),
    getInitializeVirtualTokenAccountInstructionDataDecoder()
  );
}

export type InitializeVirtualTokenAccountAsyncInput<
  TAccountPayer extends string = string,
  TAccountOwner extends string = string,
  TAccountVirtualTokenAccount extends string = string,
  TAccountPool extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  owner: Address<TAccountOwner>;
  virtualTokenAccount?: Address<TAccountVirtualTokenAccount>;
  pool: Address<TAccountPool>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export async function getInitializeVirtualTokenAccountInstructionAsync<
  TAccountPayer extends string,
  TAccountOwner extends string,
  TAccountVirtualTokenAccount extends string,
  TAccountPool extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof CBMM_PROGRAM_ADDRESS,
>(
  input: InitializeVirtualTokenAccountAsyncInput<
    TAccountPayer,
    TAccountOwner,
    TAccountVirtualTokenAccount,
    TAccountPool,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  InitializeVirtualTokenAccountInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountOwner,
    TAccountVirtualTokenAccount,
    TAccountPool,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? CBMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: false },
    virtualTokenAccount: {
      value: input.virtualTokenAccount ?? null,
      isWritable: true,
    },
    pool: { value: input.pool ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.virtualTokenAccount.value) {
    accounts.virtualTokenAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            118, 105, 114, 116, 117, 97, 108, 95, 116, 111, 107, 101, 110, 95,
            97, 99, 99, 111, 117, 110, 116,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.pool.value)),
        getAddressEncoder().encode(expectAddress(accounts.payer.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.virtualTokenAccount),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getInitializeVirtualTokenAccountInstructionDataEncoder().encode({}),
    programAddress,
  } as InitializeVirtualTokenAccountInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountOwner,
    TAccountVirtualTokenAccount,
    TAccountPool,
    TAccountSystemProgram
  >);
}

export type InitializeVirtualTokenAccountInput<
  TAccountPayer extends string = string,
  TAccountOwner extends string = string,
  TAccountVirtualTokenAccount extends string = string,
  TAccountPool extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  owner: Address<TAccountOwner>;
  virtualTokenAccount: Address<TAccountVirtualTokenAccount>;
  pool: Address<TAccountPool>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getInitializeVirtualTokenAccountInstruction<
  TAccountPayer extends string,
  TAccountOwner extends string,
  TAccountVirtualTokenAccount extends string,
  TAccountPool extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof CBMM_PROGRAM_ADDRESS,
>(
  input: InitializeVirtualTokenAccountInput<
    TAccountPayer,
    TAccountOwner,
    TAccountVirtualTokenAccount,
    TAccountPool,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeVirtualTokenAccountInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountOwner,
  TAccountVirtualTokenAccount,
  TAccountPool,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? CBMM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: false },
    virtualTokenAccount: {
      value: input.virtualTokenAccount ?? null,
      isWritable: true,
    },
    pool: { value: input.pool ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.virtualTokenAccount),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getInitializeVirtualTokenAccountInstructionDataEncoder().encode({}),
    programAddress,
  } as InitializeVirtualTokenAccountInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountOwner,
    TAccountVirtualTokenAccount,
    TAccountPool,
    TAccountSystemProgram
  >);
}

export type ParsedInitializeVirtualTokenAccountInstruction<
  TProgram extends string = typeof CBMM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    payer: TAccountMetas[0];
    owner: TAccountMetas[1];
    virtualTokenAccount: TAccountMetas[2];
    pool: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
  };
  data: InitializeVirtualTokenAccountInstructionData;
};

export function parseInitializeVirtualTokenAccountInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedInitializeVirtualTokenAccountInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      owner: getNextAccount(),
      virtualTokenAccount: getNextAccount(),
      pool: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeVirtualTokenAccountInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
